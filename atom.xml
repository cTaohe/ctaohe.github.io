<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tao&#39;s Blog</title>
  
  <subtitle>學習筆記</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ctaohe.github.io/"/>
  <updated>2019-11-14T13:43:50.875Z</updated>
  <id>https://ctaohe.github.io/</id>
  
  <author>
    <name>Tao Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NPM 套件 underscore.js</title>
    <link href="https://ctaohe.github.io/2019/11/11/2019-11-11_underscore/"/>
    <id>https://ctaohe.github.io/2019/11/11/2019-11-11_underscore/</id>
    <published>2019-11-10T16:00:00.000Z</published>
    <updated>2019-11-14T13:43:50.875Z</updated>
    
    <content type="html"><![CDATA[<h3 id="為何使用"><a href="#為何使用" class="headerlink" title="為何使用"></a>為何使用</h3><p>underscore.js 是一個非常有趣而且方便的 JavaScript 工具库，在 ES6 Vanilla Javascript 之前，跟 jQuery 一樣都是非常熱門的使用工具，即使在現在 npm 上的下載數量也還是破百萬。</p><p>而現在的 ES6 也處處都有他的影子，即使 ES6 如此好用，我還是使用了這個套件體驗了一下他的方便性。</p><p><a href="https://underscorejs.org/" target="_blank" rel="noopener">underscorejs</a> 一進入官方網站就可以看到許多熟悉的語法。</p><p>在這次的使用中，我主要是使用了 <code>groupBy()</code> 這個語法，在 ES6 中，也是可以完成的，不過會需要多打幾行字。</p><p>可以從這篇 <a href="https://gomakethings.com/a-vanilla-js-equivalent-of-lodashs-groupby-method/" target="_blank" rel="noopener">文章</a> 看到如何實現。</p><h3 id="練習專案"><a href="#練習專案" class="headerlink" title="練習專案"></a>練習專案</h3><p>雖然在這次的專案練習中只有用到一個地方，但卻讓我非常方便地完成了，例如在我們多張餐點訂單(orders)中，都有不同要求的取餐時段，例如: <code>11:00</code>、<code>11:30</code>、<code>12:00</code>等等，使用這個套件我只要短短的一個句子，便讓我達到了目的，當然基礎的邏輯還是必須練習了解，這樣才不會本末倒置。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">'underscore'</span>)</span><br><span class="line"></span><br><span class="line">_.mapObject(_.groupBy(orders, <span class="string">'time'</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;為何使用&quot;&gt;&lt;a href=&quot;#為何使用&quot; class=&quot;headerlink&quot; title=&quot;為何使用&quot;&gt;&lt;/a&gt;為何使用&lt;/h3&gt;&lt;p&gt;underscore.js 是一個非常有趣而且方便的 JavaScript 工具库，在 ES6 Vanilla Javasc
      
    
    </summary>
    
      <category term="NPM" scheme="https://ctaohe.github.io/categories/NPM/"/>
    
    
      <category term="NPM" scheme="https://ctaohe.github.io/tags/NPM/"/>
    
      <category term="node.js" scheme="https://ctaohe.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>node-cron</title>
    <link href="https://ctaohe.github.io/2019/11/10/2019-11-10_node_cron/"/>
    <id>https://ctaohe.github.io/2019/11/10/2019-11-10_node_cron/</id>
    <published>2019-11-09T16:00:00.000Z</published>
    <updated>2019-11-14T08:52:03.596Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一個網站通常會因為需要將資料在到達特定的時間時要將數據做改變，而不是用人為去變動的時候，就會使用到 node-scheduler 這類的行程安排的工具。</p><p>這個 <a href="https://www.npmtrends.com/agenda-vs-later-vs-node-cron-vs-node-schedule" target="_blank" rel="noopener">連結</a> 中，比較了四個較多人使用的同類型工具，看起來都非常的有趣。</p><p>不過這次使用的是較為年輕且輕量的 node_cron 套件，就可以完成我們這次的專案練習。</p><h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><p><a href="https://www.npmjs.com/package/node-cron" target="_blank" rel="noopener">node_cron</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i node-cron</span><br></pre></td></tr></table></figure></p><h3 id="引入使用"><a href="#引入使用" class="headerlink" title="引入使用"></a>引入使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cron = rerquire(<span class="string">'node-cron'</span>)</span><br><span class="line"></span><br><span class="line">cron.schedule(<span class="string">'* * * * * * '</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'running a task every minute'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h3><p>在使用的設定上簡單易懂 schedule 上的 <code>*</code> ，代表不同的單位可以去設定。官方文件也寫得非常的清楚容易明白，由左至右從 <code>秒</code> 到 <code>月份</code>，第六個 * 表示 day of week，以 0-7 表示， 0 和 7 卻也同樣的表是為星期日是需要特別注意。</p><p><a href="https://github.com/node-cron/node-cron" target="_blank" rel="noopener">github</a> 的 readme 中有更多的針對時間詳細設定</p><p>如果要持續一段時間可以設置<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cron.schedule(<span class="string">'1-5 * * * *'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'running every minute to 1 from 5'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>如果要每隔一段時間執行一次可以這樣設置<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cron.schedule(<span class="string">'*/2 * * * *'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'running a task every two minutes'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>在使用上真的省去很多煩惱，非常快速的就完成了設置。<br>順帶一提的是，在我的使用習慣上，會先在專案另外開一個目的地的檔案夾以及設置檔案，接著在 app.js 中 require(‘目的地檔案’)。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一個網站通常會因為需要將資料在到達特定的時間時要將數據做改變，而不是用人為去變動的時候，就會使用到 node-scheduler 這類的行程
      
    
    </summary>
    
      <category term="後端" scheme="https://ctaohe.github.io/categories/%E5%BE%8C%E7%AB%AF/"/>
    
    
      <category term="NPM" scheme="https://ctaohe.github.io/tags/NPM/"/>
    
      <category term="node.js" scheme="https://ctaohe.github.io/tags/node-js/"/>
    
      <category term="node-cron" scheme="https://ctaohe.github.io/tags/node-cron/"/>
    
  </entry>
  
  <entry>
    <title>使用 SQL PostGIS 計算距離</title>
    <link href="https://ctaohe.github.io/2019/11/09/2019-11-9_sql_geometry/"/>
    <id>https://ctaohe.github.io/2019/11/09/2019-11-9_sql_geometry/</id>
    <published>2019-11-08T16:00:00.000Z</published>
    <updated>2019-11-14T09:24:19.641Z</updated>
    
    <content type="html"><![CDATA[<h2 id="簡單認識-PostGIS"><a href="#簡單認識-PostGIS" class="headerlink" title="簡單認識 PostGIS"></a>簡單認識 PostGIS</h2><p>PostGIS 是地理圖資的管理模組，透過這個功能可以非常輕易的計算出點與點距離、線、面等不同的空間運用，減少程式碼上的計算來增加效能，更為強大的是可以做空間運算。</p><p>本篇介紹使用而不介紹安裝方式，但在安裝 PostgreSQL 時便需要將這個模組一起安裝近來才能夠使用這個強大而方便的功能。</p><ul><li><a href="https://www.postgresql.org/docs/current/datatype-geometric.html" target="_blank" rel="noopener">點、線、面</a></li><li><a href="https://www.postgresql.org/docs/current/functions-geometry.html" target="_blank" rel="noopener">幾何運算</a></li><li><a href="https://www.postgresql.org/docs/current/earthdistance.html" target="_blank" rel="noopener">earthdistance</a></li></ul><h2 id="資料格式"><a href="#資料格式" class="headerlink" title="資料格式"></a>資料格式</h2><p>在使用 node.js 的 sequelize 設定， model 可以設定成 geometry 的資料格式，而這一類型的資料是在平面上計算座標，對於地球圓形體而言，在長距離的計算下是會有所誤差的，因此還會有 geography 另一種圓形表體座標系統的出現，這次只認識 geometry。</p><p><a href="https://sequelize.org/master/class/lib/data-types.js~GEOMETRY.html" target="_blank" rel="noopener">sequelize.org</a></p><p>有做了簡單的介紹，可惜的是， sequelize 的資料套件並未對此部分做到最新的更新，在部分的使用上必須仰賴 QueryInterface 來完成正常顯示。</p><p>model</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line">DataTypes.GEOMETRY;</span><br><span class="line">DataTypes.GEOMETRY(<span class="string">"POINT"</span>);</span><br><span class="line">DataTypes.GEOMETRY(<span class="string">"POINT"</span>, <span class="number">4326</span>);</span><br></pre></td></tr></table></figure><p>migrations</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">geometry: &#123;</span><br><span class="line">  type: Sequelize.GEOMETRY;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有趣的是在資料庫不同雖然是同樣的資料，在呈現上也有所差異，第一張為 PostgreSQL，第二張為MySQL。</p><p><img src="https://lh3.googleusercontent.com/-ofmODrsiaA9ELQEu8UE9XCEKfUQSPoWmJD3sOOvIRCNdg2LpGzfV4l3jbFUPx8APBoGQrJ2yqvSSBGDP0VXPCjh4-itr5ztx2IAOT6R8FxKnch2WXemFT4v3R9vIb4AuoUPgUGbjN211pfBLIUjcgllWNcUUbWGTUcNnoqW8m_2_25YAYd_RWHnqaTDQInqND4VqOZ43yvyEuXEYKmA7lMEdV_UEJk7i7iYYEHiiBT_Idfv45oGzwDeU74axWF1mGFStyCD6-PAcJ0cw2La6JDJh0R5ax0Bi53tTNFA5RPQxvSi_26kJzJGV0v2V6FoYwBW85y-Wevb_pkrbkHJ9SVHOsBn-G05mXxfyK3zlNhnhSi8cblfsZ4O2hOM2_Hpa5QsXiYZFVSYsMtyF_2fAQ9iTEQ7t8a8xealcooXdEO1Pwg-uYqzbJLB-b2oAOr78W_2FGb-cQSYZUtdnNUIEMUJijWc5knWNzepL-AYXukMYqE9ERFPNt_pio0kpsPBxUkCobSEfrofnF_WJZtmZPFP_pWmyBlEMx9TW0CJighuZAQf3Zig-lksjQ6xNh30ZVq5fJHDs7MY7szhaZPF8tEOvKQ-I2dknU0yhzpNT0lYYbIxhsgH1r3s4MyX6JoSE5TSCPqV9lLDZFdNEydahBfLntTLe0gCIYRU5L-tWBtr-uBk6KEiiMQonSFHKibnNqvQlVSIXxmeysZI1qY6tR53Y1WXDNmhITNwXuQuCIc7k_A=w382-h342-no" alt="PostgreSQL"></p><p><img src="https://lh3.googleusercontent.com/m8mdxTWxObQz96hqhuIY1g9wR0_zjXPlpXXgyyQdKcyAJ3Padl9bAeB2u8mGol45bBN2VRkXI6jsqzvYpEBRTr1qMdJiSkobjxYVOGdrS8xhyKwXLQijQrsjsEOMa6-heyeCdSm_bCA7jRDbbA2sgTp-n_1Spo0r1PQK_xXuG8-546frX6VPuLkxPAqDT8-k_AF0s8MlThPETiSGryE2AFbuPeiYFXX2WhStX80fU0s1waq7KhR7j-IQj1YNRgtbJ9Rb7LPkp3cs4-kaBUzxDOKGv9VG-WonJvB28kjv2yDinDd9PZ-ncOfPPrbxHTdflLmrm4TOsJhjbdqiLGlvu96sUgubCVDrRZS9VeUMKjVuI3zWm93quNxmBE4sqqc5-B63PSlgq6_3bHXxL9uNMuFLh5gxRvehG-ngzWI0EvLHvNXtXmrDZ8izidAqQ3V02bEyanPwRE4OJhzr6ePmaIrTRzUbIt7Ayl4M9ZhKMl-89fCohse5Kp4RPYzsABthXTIEWtWrxdS_y0C32SUsEHdFjiVJvc4y2lkhvNKV7CzTlcfUJnevt3Ayylf3MYpzUvRYQMXPVc6xp_VtIKr8lQnwINAavk7C-EBBvBeLYlHxHsWjBoPQ6lxSybF1d_3CMCZznX6d-MizrIB_T_jK2FeTUZodQ0jt9UfogUe__nrMkN6kLl-nZt-QrcS84_cc2y-wLu_7IfGhNZXi0UbC_PsSCRO3Bo-SC936muM89pOvTxo=w171-h341-no" alt="MySQL"></p><p>在 JSON 的呈現上，是如 sequelize 範例一樣</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> point = &#123; <span class="attr">type</span>: <span class="string">'Point'</span>, <span class="attr">coordinates</span>: [<span class="number">39.807222</span>,<span class="number">-76.984722</span>]&#125;;</span><br></pre></td></tr></table></figure><h3 id="SRID"><a href="#SRID" class="headerlink" title="SRID"></a>SRID</h3><p>SRID 全名 Spatial Reference System Identifier，記不住，翻譯過來中文為空間參考識別碼。</p><p>這次我使用的只有 WGS 84 的 EPSG: 4326，是為了表示經緯度而使用，另外還有 EPSG: 900913 的距離測量系統，這次不會用到</p><p>參考: <a href="https://gis.stackexchange.com/questions/34276/whats-the-difference-between-epsg4326-and-epsg900913" target="_blank" rel="noopener">stackexchange</a></p><h2 id="使用-sequelize-寫入地理位置"><a href="#使用-sequelize-寫入地理位置" class="headerlink" title="使用 sequelize 寫入地理位置"></a>使用 sequelize 寫入地理位置</h2><p>由於 PostGIS 是一個非常活耀的專案，所以版本上的更新也非常的快速，在不同的版本間可能會有語法上的差異或者汰換，最好還是以官方文件為主。</p><p>從表單取得經緯度利用 QueryInterface 將語法組裝後才寫入。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> location = sequelize.literal(<span class="string">`ST_GeomFromText('POINT(<span class="subst">$&#123;req.user.lng&#125;</span> <span class="subst">$&#123;req.user.lat&#125;</span>)')`</span>)</span><br></pre></td></tr></table></figure></p><p>在經緯度的表示上必須看使用的資料系統，所以有時候會是 latitude 在前，有時候在後。<br><a href="https://zh.wikipedia.org/wiki/%E5%9C%B0%E7%90%86%E5%9D%90%E6%A0%87%E7%B3%BB" target="_blank" rel="noopener">wiki</a></p><p>計算距離 ST_DistanceSphere 、 ST_Distance_Sphere，前者為 PostgreSQL v11 以上使用，後者為舊版本或者 mySQL 使用。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> location = sequelize.literal(<span class="string">`ST_GeomFromText('POINT(<span class="subst">$&#123;req.user.lng&#125;</span> <span class="subst">$&#123;req.user.lat&#125;</span>)')`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// PostgreSQL</span></span><br><span class="line"><span class="keyword">const</span> distance = sequelize.fn(<span class="string">'ST_DistanceSphere'</span>, sequelize.literal(<span class="string">'geometry'</span>), location)</span><br><span class="line"><span class="comment">// MySQL</span></span><br><span class="line"><span class="keyword">const</span> distance = sequelize.fn(<span class="string">'ST_Distance_Sphere'</span>, sequelize.literal(<span class="string">'geometry'</span>), location)</span><br><span class="line"></span><br><span class="line">Model.findAll(&#123;</span><br><span class="line">  where: sequelize.where(distance, &#123; [Op.lte]: <span class="number">10000</span> &#125;), <span class="comment">// 距離為公尺</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>這樣便可以透過 sequelize 完成簡單的寫入以及查詢範圍內的資料。</p><h3 id="heroku-Postgres-PostGIS-設定"><a href="#heroku-Postgres-PostGIS-設定" class="headerlink" title="heroku Postgres PostGIS 設定"></a>heroku Postgres PostGIS 設定</h3><p>同樣的在 Heroku 使用 postgres 時也可以設定 postgis 的功能，<a href="https://devcenter.heroku.com/articles/postgis" target="_blank" rel="noopener">連結</a>。</p><p>但在設定上有些小麻煩的是，我們必須在本地也安裝 Postgres，並且設定好本地路徑的連結，否則會連不上後面的動作，都設定完成後可以參考 <a href="https://devcenter.heroku.com/articles/heroku-postgres-extensions-postgis-full-text-search" target="_blank" rel="noopener">heroku</a> 這篇說明。</p><ul><li>windows 安裝後，路徑設定，參考 <a href="https://github.com/heroku/legacy-cli/issues/334" target="_blank" rel="noopener">pg:psql might not work on windows?</a>，<code>set PATH=%PATH%;C:\Program Files\PostgreSQL\11\bin\</code> 或者 <code>C:\Program Files\PostgreSQL\11</code></li></ul><p>在 terminal 上，指令 <a href="https://devcenter.heroku.com/articles/heroku-postgresql#local-setup" target="_blank" rel="noopener">local setup</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set DATABASE_URL=postgres://$(whoami)</span><br></pre></td></tr></table></figure><p>在 whoami 裡打上，本地資料庫的名稱。</p><p>接著便可以開始設定遠端 heroku 上的 PostgreSQL</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">heroku pg:psql</span><br><span class="line">=&gt; create extension postgis;</span><br></pre></td></tr></table></figure><p>如果沒有意外這樣就完成了設定，可以將 geometry 的資料放入資料庫中了。</p><p>額外參考資料: <a href="https://docs.microsoft.com/zh-tw/sql/?view=sql-server-ver15" target="_blank" rel="noopener">microsoft</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;簡單認識-PostGIS&quot;&gt;&lt;a href=&quot;#簡單認識-PostGIS&quot; class=&quot;headerlink&quot; title=&quot;簡單認識 PostGIS&quot;&gt;&lt;/a&gt;簡單認識 PostGIS&lt;/h2&gt;&lt;p&gt;PostGIS 是地理圖資的管理模組，透過這個功能可以非常輕
      
    
    </summary>
    
      <category term="後端" scheme="https://ctaohe.github.io/categories/%E5%BE%8C%E7%AB%AF/"/>
    
    
      <category term="node.js" scheme="https://ctaohe.github.io/tags/node-js/"/>
    
      <category term="PostgreSQL" scheme="https://ctaohe.github.io/tags/PostgreSQL/"/>
    
      <category term="sequelize" scheme="https://ctaohe.github.io/tags/sequelize/"/>
    
  </entry>
  
  <entry>
    <title>nodemailer</title>
    <link href="https://ctaohe.github.io/2019/11/08/2019-11-8_nodemailer/"/>
    <id>https://ctaohe.github.io/2019/11/08/2019-11-8_nodemailer/</id>
    <published>2019-11-07T16:00:00.000Z</published>
    <updated>2019-11-14T09:24:34.266Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在很多日常生活中會常需要使用到，寄信通知、訂閱通知、或任何資料修改的寄信服務做為提醒。<br>在 node.js 中有 nodemailer 可以簡單的幫助我們達到這個目的地。</p><p>官網 docs 介紹 <a href="https://nodemailer.com/about/" target="_blank" rel="noopener">nodemailer</a></p><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i nodemailer</span><br></pre></td></tr></table></figure><h3 id="使用步驟"><a href="#使用步驟" class="headerlink" title="使用步驟"></a>使用步驟</h3><p>安裝後引入</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nodemailer = <span class="built_in">require</span>(<span class="string">"nodemailer"</span>);</span><br></pre></td></tr></table></figure><p>接著會有三個部分 tranport、mailOptions、sendMail</p><ul><li>tranport: createTransport 會需要， email server、 auth(user、password)</li><li>mailOptions: from、to、subject、text，最少要這些資訊， 甚至在 text 可以改換使用 html 或者是 template 所呈現。</li><li>sendMail: 是一個語法 function，將前面兩個資訊都放到這個語法中，並回傳 callback。</li></ul><p>example:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> transporter = nodemailer.createTransport(&#123;</span><br><span class="line">  server: <span class="string">"gmail"</span>,</span><br><span class="line">  auth: &#123;</span><br><span class="line">    user: <span class="string">"mail@example.com"</span>,</span><br><span class="line">    pass: <span class="string">"yourpassword"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mailOptions = &#123;</span><br><span class="line">  <span class="keyword">from</span>: <span class="string">"mail@example.com"</span>,</span><br><span class="line">  to: <span class="string">"friendsMail@example.com"</span>,</span><br><span class="line">  subject: <span class="string">"Title"</span>,</span><br><span class="line">  text: <span class="string">"string"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">transporter.sendMail(mailOptions, (e, info) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(info.response);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="使用-handlebars-和-template"><a href="#使用-handlebars-和-template" class="headerlink" title="使用 handlebars 和 template"></a>使用 handlebars 和 template</h2><p>在完成基本的使用後，我們會希望在不同的情境下可以程式碼可以幫助我們寄送不同的資訊，這時候設定 template 可以幫助我們減少重複的程式碼。</p><p>而 handlebars 可以幫助我們帶入不同的資訊，而且更容易的生成 email html。</p><p>為了節省時間，我是直接安裝另外一個套件 <code>nodemailer-express-handlebars</code>，日後有時間再回頭做詳細研究。</p><p>並且為 template 另外設置一個同名 template 資料夾。做為專案設置另外使用了 <code>.env</code> 環境設置。</p><p>而因為 gmail 更新的緣故和使用 template，也使用較為細節的設定。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> transporter = nodemailer.createTransport(&#123;</span><br><span class="line">  host: <span class="string">"smtp.gmail.com"</span>,</span><br><span class="line">  port: <span class="number">465</span>,</span><br><span class="line">  secure: <span class="literal">true</span>,</span><br><span class="line">  auth: &#123;</span><br><span class="line">    user: process.env.GMAIL_ACCOUNT,</span><br><span class="line">    pass: process.env.GMAIL_PASSWORD</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 必須額外設定 view engine 的選項</span></span><br><span class="line">transporter.use(</span><br><span class="line">  <span class="string">"compile"</span>,</span><br><span class="line">  hbs(&#123;</span><br><span class="line">    viewEngine: &#123;</span><br><span class="line">      defaultLayout: <span class="literal">false</span>,</span><br><span class="line">      partialsDir: <span class="string">"partials/"</span> <span class="comment">//以上兩項都是必須預設，即使沒有這個資料夾。</span></span><br><span class="line">    &#125;,</span><br><span class="line">    viewPath: <span class="string">"server/emailTemplate"</span>, <span class="comment">//選用的資校夾位置。</span></span><br><span class="line">    extName: <span class="string">".hbs"</span> <span class="comment">//使用 hbs 附屬檔名。</span></span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>再寄送 email 的部分則是沒甚麼太大的變化，唯一的變化是在 mailOptions，加入 template 指定的檔案名稱、context 需要傳入的資訊。而我使用習慣上會對傳入的資訊做 obj 包裝命名成 emailInfo。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> emailInfo = &#123;</span><br><span class="line">  email: <span class="string">'friendEmail'</span>,</span><br><span class="line">  template: <span class="string">"templateName"</span>,</span><br><span class="line">  subject: <span class="string">"title"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mailOptions = &#123;</span><br><span class="line">  <span class="keyword">from</span>: process.env.GMAIL_ACCOUNT,</span><br><span class="line">  to: emailInfo.email,</span><br><span class="line">  subject: emailInfo.subject,</span><br><span class="line">  template: emailInfo.template,</span><br><span class="line">  context: &#123; emailInfo &#125;</span><br><span class="line">&#125;;</span><br><span class="line">transporter.sendMail(mailOptions, (error, info) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Email sent "</span> + info.response);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="email-HTML"><a href="#email-HTML" class="headerlink" title="email HTML"></a>email HTML</h2><p>在寄信的時候，通常我們會希望傳送給別人的 email 可以被包裝的生動，而不是只有呈現文字，沒有排版的樣子，又或者是想呈現客製化字型。<br>但在這部分並不是每一個信箱都會全部支援的，在設計 HTML 樣板之前，應該確認好是否能呈現你所需要的樣式，像是在 gmail 的部分，就只開放最傳統的 HTML 樣式，甚至連動畫都不支援。</p><p><a href="https://www.campaignmonitor.com/css/" target="_blank" rel="noopener">campaignmonitor</a> 提供了不少資訊，可以供我們做參考。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在很多日常生活中會常需要使用到，寄信通知、訂閱通知、或任何資料修改的寄信服務做為提醒。&lt;br&gt;在 node.js 中有 nodemailer
      
    
    </summary>
    
      <category term="NPM" scheme="https://ctaohe.github.io/categories/NPM/"/>
    
    
      <category term="NPM" scheme="https://ctaohe.github.io/tags/NPM/"/>
    
      <category term="node.js" scheme="https://ctaohe.github.io/tags/node-js/"/>
    
      <category term="gmail" scheme="https://ctaohe.github.io/tags/gmail/"/>
    
  </entry>
  
  <entry>
    <title>好用的時間套件 moment</title>
    <link href="https://ctaohe.github.io/2019/11/07/2019-11-7_momentjs/"/>
    <id>https://ctaohe.github.io/2019/11/07/2019-11-7_momentjs/</id>
    <published>2019-11-06T16:00:00.000Z</published>
    <updated>2019-11-14T09:24:37.484Z</updated>
    
    <content type="html"><![CDATA[<p>在生活實際的運用上常常會使用到時間的運算以及呈現，雖然 javascript、node.js 有提供 <code>new Date()</code>等語法的運用，不過，為了可以更快速簡單的完成一些格式上的工作以及時間組裝，這次使用了 moment.js 套件，做為簡單的認識。</p><h2 id="moment-js"><a href="#moment-js" class="headerlink" title="moment.js"></a>moment.js</h2><p><a href="https://momentjs.com/" target="_blank" rel="noopener">moment 官方</a> 有很清楚地安裝方式，也可以使用 browser MDN。</p><p>我則是使用 npm 做為安裝， simple and easy。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install moment</span><br></pre></td></tr></table></figure></p><p>在需要使用的檔案中 require。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">'moment'</span>)</span><br></pre></td></tr></table></figure><p>在使用上與 new Date() 大同小異，但更為方便的是對於格式化，以及日期的加減。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> today = moment() <span class="comment">// 會以 moment('現在時間') 的格式呈現</span></span><br><span class="line"></span><br><span class="line">moment().format() <span class="comment">// YYYY-MM-DDTHH:mm:ss+08:00</span></span><br><span class="line">moment().format(<span class="string">'MMMM Do YYYY, h:mm:ss a'</span>);  <span class="comment">// November 14th 2019, 1:37:08 pm</span></span><br></pre></td></tr></table></figure><p>使用 <code>format()</code> 所得到的結果是 string。</p><h3 id="開始與結束"><a href="#開始與結束" class="headerlink" title="開始與結束"></a>開始與結束</h3><p><a href="https://momentjs.com/docs/#/manipulating/start-of/" target="_blank" rel="noopener">開始</a>，<code>moment().startOf(String)</code></p><p><a href="https://momentjs.com/docs/#/manipulating/end-of/" target="_blank" rel="noopener">結束</a>，<code>moment().endOf(String)</code></p><p>字串</p><ul><li>year</li><li>month</li><li>day</li><li>minute</li><li>second</li></ul><ul><li>quarter</li><li>isoWeek</li><li>date 與 day 相似</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> start = moment().startOf(<span class="string">'day'</span>)</span><br><span class="line"><span class="keyword">const</span> start = moment().endOf(<span class="string">'day'</span>)</span><br></pre></td></tr></table></figure><h3 id="加減日期"><a href="#加減日期" class="headerlink" title="加減日期"></a>加減日期</h3><p><a href="https://momentjs.com/docs/#/manipulating/add/" target="_blank" rel="noopener">加</a>，<code>moment().add(Number, String)</code></p><p><a href="https://momentjs.com/docs/#/manipulating/subtract/" target="_blank" rel="noopener">減</a>，<code>moment().subtract(Number, String)</code></p><p>簡單的加減前一天，後一天</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">moment().add(<span class="number">1</span>, <span class="string">'days'</span>)</span><br><span class="line">moment().subtract(<span class="number">1</span>, <span class="string">'days'</span>)</span><br></pre></td></tr></table></figure><h3 id="轉成-date-格式"><a href="#轉成-date-格式" class="headerlink" title="轉成 date 格式"></a>轉成 date 格式</h3><p>在使用 moment 格式後，除了使用 format 轉成字串，也可以使用其他時間的制定格式像是 <code>.toString()</code> 也是一種字串格式。</p><p><code>.toDate()</code>，則是另一種轉成日期格式的語法，可以直接接在有效的 <code>moment()</code>後方，如果不使用直接將 <code>moment()</code> 放到 new Date() 也是另外一種方式。</p><h3 id="計算與現在經過了多少時間"><a href="#計算與現在經過了多少時間" class="headerlink" title="計算與現在經過了多少時間"></a>計算與現在經過了多少時間</h3><p>moment 還有另外特別方便的功能就是可以簡單的實現計算，特定時間距離現在經過了多久。</p><p><a href="https://momentjs.com/docs/#/displaying/fromnow/" target="_blank" rel="noopener">time from now</a></p><p>使用 <code>moment().fromNow()</code>。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">moment([<span class="number">2007</span>, <span class="number">0</span>, <span class="number">29</span>]).fromNow(); <span class="comment">// X years ago</span></span><br></pre></td></tr></table></figure><p>以上是簡單的認識好用的 npm moment 套件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在生活實際的運用上常常會使用到時間的運算以及呈現，雖然 javascript、node.js 有提供 &lt;code&gt;new Date()&lt;/code&gt;等語法的運用，不過，為了可以更快速簡單的完成一些格式上的工作以及時間組裝，這次使用了 moment.js 套件，做為簡單的認識
      
    
    </summary>
    
      <category term="NPM" scheme="https://ctaohe.github.io/categories/NPM/"/>
    
    
      <category term="NPM" scheme="https://ctaohe.github.io/tags/NPM/"/>
    
      <category term="node.js" scheme="https://ctaohe.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>Keep free heroku alive</title>
    <link href="https://ctaohe.github.io/2019/11/06/2019-11-6_keep_heroku_alive/"/>
    <id>https://ctaohe.github.io/2019/11/06/2019-11-6_keep_heroku_alive/</id>
    <published>2019-11-05T16:00:00.000Z</published>
    <updated>2019-11-14T09:25:51.958Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>heroku 對於一個剛開始學習網路開發的學習者，算是非常的友善和方便。在免費的 application 佈署下有個限制，完成佈署後如果沒有使用者造訪網站，便會在最後一次造訪後的半個小時後進入休眠。</p><p>而每次要重新喚醒進入網站的時候，第一次總是會讀取很久，造成體驗上的不適。也是許多人想要解決的問題。</p><p>在最簡單的方式下便是花一點小費用，升級伺服器，讓伺服器可以不進入休眠狀態。另外一種方式便是每半個小時觸發一次造訪網站。</p><p>可行的方式便是設定 scheduler 或者藉由第三方造訪。</p><p>heroku 也有為此提供 addons，可惜的在免費的使用者有著 dyno hours 限制。</p><p><a href="https://devcenter.heroku.com/changelog-items/907" target="_blank" rel="noopener">https://devcenter.heroku.com/changelog-items/907</a></p><p>在未提供信用卡的條件下，有著 550 free dyno hours，提供了之後會再增加 450 hours。所以總共最多會有 1000 hours。</p><p>那甚麼是 dyno hours 呢? <a href="https://devcenter.heroku.com/articles/usage-and-billing#computing-usage" target="_blank" rel="noopener">https://devcenter.heroku.com/articles/usage-and-billing#computing-usage</a></p><p>heroku 做出了解釋，簡單的說也就是伺服器被程式觸發運行的時間，在我們如果不觸發長時間的運行下，1000 hours 是無法使用完的，但如果要讓他長時間醒著，表示 24 hrs都可以快速進入網站的情境下，一個月會使用掉 720 ~ 744 hours，剩餘可以使用設置 addons 便只剩餘 256 小時，所以使用內建的 scheduler 便無法滿足免費的狀態下，使用不休眠的網站。</p><h2 id="選擇的方法"><a href="#選擇的方法" class="headerlink" title="選擇的方法"></a>選擇的方法</h2><p>最後我選擇不使用 heroku 的 scheduler 插件增加額外的 dyno hours，也不在程式碼中，設置行程設定，避免萬一休眠時無法執行問題，而是選擇較為簡便的方式，</p><ul><li><a href="https://cron-job.org/en/" target="_blank" rel="noopener">https://cron-job.org/en/</a></li></ul><p>使用這個網站來幫我解決半小時觸發的問題。在使用上也是非常快速和簡單。</p><p>步驟:</p><ol><li><p>註冊</p></li><li><p>完成註冊並且登入後，點選 members &gt; <code>Cronjobs</code> &gt; 右邊的 <code>Create conjobs</code></p></li></ol><p><img src="https://lh3.googleusercontent.com/ARaXQ0tDMfXPP2NZRkZymsOQlhxMjMARhFfSvyOOTlyzqRH07JSgQy2lzyPG-C5JvJd2X_QVYMsGcgty6Dv3ACc6JJsnJZVRKGNbxvhQ8jmeD4ViI11LTRbhrd9HBSakmKiSLeu9T_9JEKa19ySjk1ichzT-M4Uz1ZLj9vrxZDVkDd5rzqzVJFlGJio9me7rhFYEpo2PIf1bfMKtFrAfQS-Los7gMKW0PRYMTJd4BpBlqeRvlENT4U03LzJO6JAbi53YJ8B-uYENjHxM8dpBS5m_D3zfltFumLswrl4IC23xA2icXU2Gmzaor_pMAKAsp6YIy1Ef56g7TQximF-Slc0v98bjSCSD9FBryFKgT96sbKiZbdIkvnjp5qUWx-Pa9UKEDJ4zOmPESwuIv1SCt8iRT5X1NTsrcapXQpOvK1bNRDoWy593ZKa3xZJ29qPkVB9rpRNjiAKnJwWT-eGN6iWrK44LWsaJVFH0QFzMi969Szjo_l9M4BkYcSN6rlipxucZVI_e79RzyxsMun5Htv2WEUMJjpFW_4QQXrqTxKzXsgbbyk1-wydxv0ezVfvrzGfeeogSSaHlNmcko3WZEnPWcc5OQITCr67N_mXQwxS-1nP_dxeUOY2wyAeRooWGEJ7sf-RMfRmBxwBNVprtdcvuC3GG4Hh-mC3hSiXSc4wlKrGy5sLCmCfyfbIBO7WI-u38QAakmNimQVp-7tTyxFNTWzlq0ukaJraOol9C973k6tw=w769-h800-no" alt="option"></p><p>title、address 填入你想造訪的網站，這邊我是使用非需登入使用的首頁做為觸發。</p><ol start="3"><li><p>在 user-defined exection dates 做設定，month、 week 每個都是完全需要的，hours 的設定上，現在 heroku 已經取消每天 18 hrs的免費限制，可以使用 24 hrs，但我還是會設定在凌晨12點至早上8-9點是不觸發的。</p></li><li><p>minutes 則是設定 0 和 30 兩個選項做為執行，而有時我會設定在 55 分和 25 分。</p></li><li><p>完成後便點選最下方的 Create cronjob。</p></li></ol><p>當開始運作後，可以看到行程是否有成功或失敗以及觸發的時間。<br><img src="https://lh3.googleusercontent.com/JAonY3f1LrvU6XM_b-1oHxwcyizQRtLvC7ghhD-8TULuGqGiL4IJbYVSSXOJknBRyk2XG_vpB_FTFaW-K9Xlc_R0DIswGeyOr0Px0s-K92uRP4sGroawAKRrr3CK46iAncwpGbQPvT1UsAN7xVHYIkXZ_VdOI3hGCYpWFXvrbfRLcFLV6-hVuycMqwytu--OK8X6iKPtZnl-60GANaCGFMT_XaBR7xPi0watJnhZXaU8FygD0_zJkpJegAQzNfFDkNpeQOw6ov0tnPIFVL0vanwGJWD1pyu1TS8JP-LCq1wMpnhWLfFDXnO6gfnH4dQTJnUM9l78lEXIVYpUj6xwcEaiT_uD0vG0T-PVSFPzAqZ-pWtM8YKQQ9L-1Gc0siLLNBESAKLAXo9AcDh0TY2THxrgiXeifnstIN5wsqXWfUTFm2_0CZ7HwX7NwuiV2X_C22gKQa4aeutOTCJaPeGh7_KkJ-FzN37kedSZYIKAKg2BAbmwgZqhp8WGhTbYeSxXSQhVgBoDW8Smly7HJ1SyihKkkXqpNC_nGiIiiU_QP5uD_5d8BHGWw-QKpVunNNpO2JTOFMQqRVs0oUkzFdF2Gctq2KlTrzyaeoeqht39hulN6EfQVdrC2Fou37Yli-i3DSdN-lmjekJF-IP6jfirpUrzkQPLfyAGSXv6rnkGf0nTDYJNe7KXOv_-cpnZsl5fA_Jo7ekOWq-lmqGCJhMcqoq_ZpDrTyKRzQ45zpML51KWqVU=w949-h640-no" alt="result"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;heroku 對於一個剛開始學習網路開發的學習者，算是非常的友善和方便。在免費的 application 佈署下有個限制，完成佈署後如果沒有
      
    
    </summary>
    
      <category term="實作" scheme="https://ctaohe.github.io/categories/%E5%AF%A6%E4%BD%9C/"/>
    
    
      <category term="heroku" scheme="https://ctaohe.github.io/tags/heroku/"/>
    
  </entry>
  
  <entry>
    <title>jsoneditoronline.org</title>
    <link href="https://ctaohe.github.io/2019/11/05/2019-11-5_jsoneditoronline/"/>
    <id>https://ctaohe.github.io/2019/11/05/2019-11-5_jsoneditoronline/</id>
    <published>2019-11-04T16:00:00.000Z</published>
    <updated>2019-11-14T09:30:22.607Z</updated>
    
    <content type="html"><![CDATA[<p>最近因為專案練習，有接觸到需要比較真實的數據資料以方便加入資料庫，於是找到了台北市政府公開資料的網站，在得到資料後，發現有些地方需要把資料轉成為想要的 json 格式，為了方便快速整理一些小資訊，發現了 jsoneditoronline.org 線上整理 json 的網站。</p><p>這個網站提供了許多簡易的 json 功能，可以將雜亂的資料做篩選，還有輸出想要的資料格式，在使用了這個網站之後想要將一些使用的經驗整理下來，方便日後快速回憶。</p><h3 id="簡單理解-json-格式"><a href="#簡單理解-json-格式" class="headerlink" title="簡單理解 json 格式"></a>簡單理解 json 格式</h3><p>JSON 全名 Javascript Object Notation。</p><p>資料型態:</p><ul><li>數值: 十進位，可以為負數，不可有前導 0。</li><li>字串: 以<code>&quot;&quot;</code>括起來的 Unicode。</li><li>布林值: true or false。</li><li>array: 以<code>[]</code>刮起來。</li><li>object: 以<code>{}</code>刮起來的無序 Key-value pairs。</li><li>null: 值為 null。</li></ul><p>應用領域:</p><ul><li>web 開發: javascript、Node.js、Java 使用居多。</li><li>NoSQL 資料庫: MongoDB、CouchDB、RavenDB。</li></ul><p>格式通常會用 obj 或者 array 包覆</p><p>object 可以將想要的資訊都組合在同一個 <code>{}</code>視為一筆資料。<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"firstName"</span>: <span class="string">"Tao"</span>,</span><br><span class="line">  <span class="attr">"lastName"</span>: <span class="string">"Chen"</span>,</span><br><span class="line">  <span class="attr">"favorite"</span>: [<span class="string">"new tech"</span>, <span class="string">"books"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用 array 可以更方便的儲存多個類似的資料。<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"firstName"</span>: <span class="string">"Tao"</span>,</span><br><span class="line">    <span class="attr">"lastName"</span>: <span class="string">"Chen"</span>,</span><br><span class="line">    <span class="attr">"favorite"</span>: [<span class="string">"new tech"</span>, <span class="string">"books"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="網站使用"><a href="#網站使用" class="headerlink" title="網站使用"></a>網站使用</h3><p>網站的使用非常的簡單</p><p><img src="https://lh3.googleusercontent.com/NH7iQ_jHnj5TNGsb_0dSrlFnmMwfO1SveC9IiMNfCbL9LQ-kWlw2VbJeY15XNzEfPTKQSW9UaAPF7Q7I3cD4aiKipJ3QuWHWrUJlQjZ2jKJgPCiyVmDMv5roI8vNFPZTUBWnTWmnUwkNAXM2KPmEd794aD2ERyb-BguqTCdoxxRA7WtCqfjBBuK-qHfbUs-nKVKMi-tq-PPMPF6KrYbnoFBYwVXUReo5u-KwMnrBgwfULC_U_nWaFMr6BIwTEEIosYXzBaF3bUzhubZAT_HuCu6R_0O2ee7eXaZ_DA3V0hRkzKGYP5jo-5EFn7SQ0qyswzSkiKx6z9cWasWGHgTiMQwCbJQpwN_pZlP0EgXaGVc3XItYAJRKdfHiHGIfhwX0ZGPg3Bjf0pls6E7svflh8mKyE5LOCp7KLGWSy_E0HaiQiBsdLcb-MOb2AQw7r2S_GAbmKLWfJvVl2vck_5AGC-PLHxZsZS20UriybwAatiVaptujtGEguCYJeKr4JlwpGeJYySV0zfLpwE5SfFQO4bbpTV7zMFB2880pHExbxJrb0W7o-yq--TU6mz58sNxL7jFMe-qklWwZvUUzzk6QSULA7gsozYisWhWx1rgDB7Adcq5RXWOIQjMZ27x7K-8Pix3RBusA2dF9p_x9kD98Dk0hHxUZ4QSDoDLNUSPzQiEKlGERs6d9J57a7eaVRPIhzmi0yhWssbfZeUhnR47S2-ihHQ3Rt7D-p9JYKnw5tZf8Hrg=w1068-h264-no" alt="jsoneditoronline"></p><p>左邊放置你想要 format 的資料，之後點選中間 <code>&gt;</code> 符號，便會輸出到右邊，在右邊資料中可以看到井然有序，完整架構的資料呈現出來，可以很方便的就了解有哪些資料可以使用。</p><p>接下來有趣的地方來了。</p><p>在資料框的上方有許多小工具可以點選，而漏斗形狀的工具圖案，便是方柱我們最多的功能，點選下去之後會跳出小方框。</p><p><img src="https://lh3.googleusercontent.com/GAfbjLGt6WhqZA4NzuDFDyLQ4x4eN8Yj5JjNF5N7ye96aFYR8BgB1ybfnuKDox5X9bhUXBpjaWEWxXccQYhyYqAK0Ru5xwyfQwjmC6zUR2aLpf7CEQ0c7mj9txHYLsoPM7ZYonI-yovdC4A75Eit0jP5w2xqKyg6ydnGxizDQGEo8lniEgGtxatQz2aVw34__xbXEta05UTkr-qFR_jFqNkpPH0vI5QquF0fJWeSSl8ZyNPsdaXGy27wzuBab67SApkm0iqnqDFQ0f1L0Zd4aXV0dCEkTo7ZFM0IYhfR-Sed0-ysHbv5UBgmYVVTb1CecHBXIJosD9yJzcs3fDXMREN3YG86qe8yAOG22Y531EKKQB1kY7w8XMHkmuzuQ1G14JXdJ2sJFdACsX4-mhOm2TNY8GZZEnrHXC1laKNEX8zrMPEjaNYCut8wHg5hgdVCSGoN10smOUnNNsFU8VOgJ8dy0lKEHJTcG2kJaJqP75TIoXac9Oyv87ooZr06EHoTzX7H_h51rkWJdzSsfcVpC61l7fU5UdTtvCCIkvoJiNAj8QqlZJXvrjMpMo9L4IOfedIDw_SdgfhdlKHGZYYLw5hAtKhTEE8Yi2LzBmYbIEPGrE6KqcgHPQSj6-Prza8HL3psFAGlWYcveg6LmiP9grzpVub5csmYwhskh4by8a33lV5XU1nfy-7ZL-hLF56t_51TVjqZLJuZBSgqybP8m3mWulsIbyJ9gRNgwcKkoYmq11g=w636-h613-no" alt="transform"></p><p>詳細的教學可以經由 <a href="http://jmespath.org/" target="_blank" rel="noopener">http://jmespath.org/</a> 或者 <a href="http://jmespath.org/tutorial.html" target="_blank" rel="noopener">http://jmespath.org/tutorial.html</a> 學習了解。</p><p>這邊列出我最常使用的功能，假使資料格式如下:</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">"data"</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Tao"</span>,</span><br><span class="line">      <span class="attr">"tel"</span>: <span class="string">"08-7654321"</span>,</span><br><span class="line">      <span class="attr">"favorite"</span>: <span class="string">"books"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>當我再查詢的時候，我需要變更標籤不同的名稱、以及需要的標籤時，可以在 query 中如下方的語法，這樣大大的方便標籤的修改。</p><p><code>data[].{firstName: name}</code><br><img src="https://lh3.googleusercontent.com/Di3HI5kprcji0o4YfMQhDNsNiWedxcgppWJtT0oum7-kjRS-xffgZtPpCX0pPR6Qr4IFLnpyLdjier1EWetR4nKWKk8l9WwypCJ-NJ_H6fi2h2BDkbKO8MsyTXVgVjnxYZzIE3arvMNSPpxiNOwPgGYw47iT6vhDeHUzSgFmfm5iiU2pCyJDP4w-vqUENw9VPOaAqJ1QoTcj04GLBFQyAhLqaUJH2sbLIemUlv91TsuNgecqHaGgLm736NC72hSm4eapCzKmHrnd-oM7HAt7Ik_iPrz4ST-X7AGrXEkmgD05QPTD1kcNxLDuOrIO41Hfds7BNW9zyI2aQyl4hkrLRBgYwud7gagMxqqfIFUj7BfS-avfcxFh40lCCPXmKcRfgO2VCwpFsNZXfdPwVol4ovjIW9OuhKppnTU-LqZl1dZUEib5DyL5DAoi5HjGPhlKqVYMhPkx3SFnnHCP4xhVuacRduOqG4EDAAVPdLm_hpkK_H4jY5w8nsiSEjzsgUchZ4eEUGWPaJjsq9r8UGzWZMCp1qSSE0dbn-keM53tRfIrNYEOxOxWBgp6MiqXOSM3Zzy8QrKMZdblIlnAMKENdqO8CKp-WQA1i9u_84junxbfwJayaytH6S--B51Md7jS5lBQhmfTb0rOoJwrjUkR1iak9JGuwJ2YivHtdVMsxh-N3wxFWIL213pWV1snBtKnWch1Qi4tIlMqj-a_54jnues1PktI9A-5QIK-3ngd_zMovFE=w659-h597-no" alt="query後"></p><p>而如果是字串數字轉成真正的數字同樣在 <code>:</code> 後的標籤加上 to_number(‘標籤’)，就可以快速的將字串數字轉成真正的數字。</p><p>而在需要塞選的時候，也是利用類似的字串。 <code>[?name == &#39;Tao&#39;]</code> 使用 <code>?</code> 和 <code>==</code> 可以完成需要的篩選。</p><p>使用上面的三種語法就可以完成 80% 的工作，在整理資料上方便了不少。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近因為專案練習，有接觸到需要比較真實的數據資料以方便加入資料庫，於是找到了台北市政府公開資料的網站，在得到資料後，發現有些地方需要把資料轉成為想要的 json 格式，為了方便快速整理一些小資訊，發現了 jsoneditoronline.org 線上整理 json 的網站。
      
    
    </summary>
    
      <category term="實作" scheme="https://ctaohe.github.io/categories/%E5%AF%A6%E4%BD%9C/"/>
    
    
      <category term="JSON" scheme="https://ctaohe.github.io/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>藍新金流串接實作</title>
    <link href="https://ctaohe.github.io/2019/10/19/2019-10-19_newebpay/"/>
    <id>https://ctaohe.github.io/2019/10/19/2019-10-19_newebpay/</id>
    <published>2019-10-18T16:00:00.000Z</published>
    <updated>2019-11-14T07:14:39.965Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>練習藍新金流，記錄實作步驟與需要的參數，參考 alpha camp 教材以及 <a href="https://www.newebpay.com/website/Page/content/download_api" target="_blank" rel="noopener">藍新串接官方文件</a></p><h2 id="邏輯"><a href="#邏輯" class="headerlink" title="邏輯"></a>邏輯</h2><p>在串接上第三方支付平台需要取得交易參數</p><table><thead><tr><th>參數</th><th>中文</th><th>備註</th></tr></thead><tbody><tr><td>MerchantID</td><td>商店代號</td><td>藍新金流商店代號</td></tr><tr><td>Version</td><td>串接程式版本</td><td></td></tr><tr><td>RespondType</td><td>回傳格式</td><td>Json 或 string</td></tr><tr><td>TimeStamp</td><td>時間戳</td><td></td></tr><tr><td>Amt</td><td>訂單金額</td><td></td></tr><tr><td>Email</td><td>付款人電子信箱</td><td></td></tr><tr><td>MerchantOrderNo</td><td>商店訂單編號</td><td></td></tr><tr><td>ItemDesc</td><td>商品資訊</td><td>鑑別訂單紀錄</td></tr><tr><td>LoginType</td><td>藍新金流會員</td><td>1 為需要登入，0 為不需要，對 client 的要求</td></tr><tr><td>ReturnURL</td><td>支付完成返還商店網址</td><td></td></tr><tr><td>NotifyURL</td><td>支付通知網址</td><td>每期授權結果通知</td></tr><tr><td>ClientBackURL</td><td>支付取消返回網址</td></tr></tbody></table><p>資料會進行加密才進行傳送參數</p><table><thead><tr><th>參數</th><th>中文</th><th>備註</th></tr></thead><tbody><tr><td>MerchantID</td><td>商品代號</td></tr><tr><td>TradInfo</td><td>交易資料 AES 加密</td></tr><tr><td>TradInSha</td><td>交易資料 SHA256 加密</td></tr><tr><td>Version</td><td>串接程式版本</td></tr></tbody></table><p>前端頁面會先取得訂單付款頁面，取得<code>訂單編號</code>、<code>總金額</code>、<code>金流參數</code>、<code>加密過後資料(AES、SHA256)</code>。</p><p>教材顯示 <code>MerchantID</code>、 <code>TradeInfo</code>、 <code>TradeSha</code>、 <code>Version</code>，官方是以字串呈現，以及教材導向網址 <code>PayGateWay</code>(可更改命名是為表單給予要導向的網頁，教材命名這個名稱)，在按出按鈕後傳送到付款頁面。</p><p>官方 ( HTML )</p><ul><li>正式: <code>https://core.newebpay.com/MPG/period</code></li><li>測試: <code>https://ccore.newebpay.com/MPG/period</code></li><li>新網址: <code>https://ccore.newebpay.com/MPG/mpg_gateway</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"https://ccore.newebpay.com/MPG/mpg_gateway"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"MerchantID"</span> <span class="attr">value</span>=<span class="string">"MS35199"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"PostData_"</span> <span class="attr">value</span>=<span class="string">"357d8c54d0d"</span> /&gt;</span> //加密後字串</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"go"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>教材( 使用 handlebars )</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>準備為訂單編號： &#123;&#123;order.id&#125;&#125; 付款<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>總價 &#123;&#123;order.amount&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>總價 &#123;&#123;order.amount&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"Spgateway"</span> <span class="attr">action</span>=<span class="string">"&#123;&#123;tradeInfo.PayGateWay&#125;&#125;"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">  MerchantID:</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"MerchantID"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;tradeInfo.MerchantID&#125;&#125;"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  TradeInfo:</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"TradeInfo"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;tradeInfo.TradeInfo&#125;&#125;"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  TradeSha:</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"TradeSha"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;tradeInfo.TradeSha&#125;&#125;"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  Version:</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"Version"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;tradeInfo.Version&#125;&#125;"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Payment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><ol><li>付款頁面，如果有購物餐車，顯示購物車資料，在按付款後才會導向真正的付款頁面，這裡為 <code>/order/:id/payment</code></li><li><p>串接金流 Get /order/:id/payment，取得訂單 data，使用 4 個 function ， <code>genDataChain</code> 將物件轉換成字串、<code>create_mpg_aes_encrypt</code> 加密、<code>create_mpg_sha_encrypt</code>雜湊打包 <code>TradeInfo</code>進行交易、回傳後使用的 <code>create_mpg_aes_decrypt</code>解密，最後解密重新取得 <code>TradeInfo</code> 處理已取得的資料。</p><ul><li>getTradeInfo - 取得 data</li><li>getTradeInfo - data 放入 mpg_aes_encrypt(data) 處理 , 結果再放入 mpg_sha_encrypt(mpg_aes_encrypt(data)) 處理</li><li><p>getTradeInfo - 得到的資料打包成 tradeInfo，包含上方提到的 MerchantID 、 TradInfo 放 mpg_aes_encrypt ， TradInSha 放 mpg_sha_encrypt， Version 放版本。</p></li><li><p>另外在多 payGeteWay，發送 API 的位置，還有 MerchantOrderNo，存到訂單做紀錄。</p></li></ul></li><li><p>串接金流 Post /spgateway/callback</p><ul><li><code>/spgateway/callback?from=NotifyURL</code>，支付通知網址，電商端 req.query 會收到</li><li>spgatewayCallback: <code>TradeInfo</code>，交易完成後回傳的資料，作為電商核對確認付款</li><li>spgatewayCallback: <code>create_mpg_aes_decrypt</code>，使用解密函式，作為確認資料正確性，以及更新資料庫</li><li>spgatewayCallback: <code>data</code>，<code>create_mpg_aes_decrypt</code>解密後</li><li><code>/spgateway/callback?from=ReturnURL</code>，支付完成返還商店網址</li></ul></li></ol><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>定義 route</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">"/order/:id/payment"</span>, orderController.getPayment);</span><br><span class="line">router.post(<span class="string">"/spgateway/callback"</span>, orderController.spgatewayCallback);</span><br></pre></td></tr></table></figure><p>定義參數</p><ul><li>臨時網址 <a href="https://ngrok.com/" target="_blank" rel="noopener">ngrok</a> 工具</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> URL = <span class="string">""</span>; <span class="comment">//本地 domain 不接受，使用 ngrok 工具做臨時網址，取得的網址放這</span></span><br><span class="line"><span class="keyword">const</span> MerchantID = <span class="string">""</span>; <span class="comment">// 商店代號</span></span><br><span class="line"><span class="keyword">const</span> HashKey = <span class="string">""</span>; <span class="comment">//API 金鑰</span></span><br><span class="line"><span class="keyword">const</span> HashIV = <span class="string">""</span>; <span class="comment">//API 金鑰</span></span><br><span class="line"><span class="keyword">const</span> PayGateWay = <span class="string">"https://ccore.spgateway.com/MPG/mpg_gateway"</span>; <span class="comment">//付款網址</span></span><br><span class="line"><span class="keyword">const</span> ReturnURL = URL + <span class="string">"/spgateway/callback?from=ReturnURL"</span>; <span class="comment">//支付完成返還商店網址</span></span><br><span class="line"><span class="keyword">const</span> NotifyURL = URL + <span class="string">"/spgateway/callback?from=NotifyURL"</span>; <span class="comment">//支付通知網址</span></span><br><span class="line"><span class="keyword">const</span> ClientBackURL = URL + <span class="string">"/orders"</span>; <span class="comment">//支付取消返回網址</span></span><br></pre></td></tr></table></figure><p>敏感資料安裝 dotenv 放在 .env</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">URL=</span><br><span class="line">MERCHANT_ID=</span><br><span class="line">HASH_KEY=</span><br><span class="line">HASH_IV=</span><br></pre></td></tr></table></figure><p>加密用 function，最後會將 getTradeInfo 放到 getPayment 。經由 getPayment 呼叫 getTradeInfo 傳入 <code>Amt</code>、 <code>Desc</code>、 <code>email</code>，進入 getTradeInfo 之後</p><ul><li><code>genDataChain</code>放在 <code>create_mpg_aes_encrypt()</code> 中幫忙 data 改為字串資料</li><li>將 <code>data</code> 作為參數放到 <code>create_mpg_aes_encrypt(TradeInfo)</code> 宣告成 <code>mpg_aes_encrypt</code></li><li>將 <code>mpg_aes_encrypt</code> 放到 <code>create_mpg_sha_encrypt(TradeInfo)</code> 宣告成 <code>mpg_sha_encrypt</code></li><li>宣告 <code>tradeInfo</code> 打包 mpg_aes_encrypt 、 mpg_aes_encrypt 等資料回傳作為傳送交易參數</li></ul><p>使用 getTradeInfo 時，我們會定義 data 其中會設定 <code>MerchantOrderNo</code> 並用 <code>Date.now()</code> 設定編號,未來在 打包 <code>tradeInfo</code> 也會設定 <code>MerchantOrderNo</code> 將資料從 data 傳入，在做交易的時候，取得回傳交易資料解碼後一樣會有 <code>MerchantOrderNo</code>，我們會當作 order 欄位 <code>sn</code> 搜尋依據，更改是否已經付款。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">"crypto"</span>); <span class="comment">// 加密</span></span><br><span class="line"><span class="keyword">const</span> nodemailer = <span class="built_in">require</span>(<span class="string">"nodemailer"</span>); <span class="comment">// 寄送 mail</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 放入 create_mpg_aes_encrypt 將交易資訊轉成字串，以便加密使用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">genDataChain</span>(<span class="params">TradeInfo</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> results = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> kv <span class="keyword">of</span> <span class="built_in">Object</span>.entries(TradeInfo)) &#123;</span><br><span class="line">    results.push(<span class="string">`<span class="subst">$&#123;kv[<span class="number">0</span>]&#125;</span>=<span class="subst">$&#123;kv[<span class="number">1</span>]&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> results.join(<span class="string">"&amp;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create_mpg_aes_encrypt</span>(<span class="params">TradeInfo</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> encrypt = crypto.createCipheriv(<span class="string">"aes256"</span>, HashKey, HashIV);</span><br><span class="line">  <span class="keyword">let</span> enc = encrypt.update(genDataChain(TradeInfo), <span class="string">"utf8"</span>, <span class="string">"hex"</span>);</span><br><span class="line">  <span class="keyword">return</span> enc + encrypt.final(<span class="string">"hex"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create_mpg_sha_encrypt</span>(<span class="params">TradeInfo</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sha = crypto.createHash(<span class="string">"sha256"</span>);</span><br><span class="line">  <span class="keyword">let</span> plainText = <span class="string">`HashKey=<span class="subst">$&#123;HashKey&#125;</span>&amp;<span class="subst">$&#123;TradeInfo&#125;</span>&amp;HashIV=<span class="subst">$&#123;HashIV&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sha</span><br><span class="line">    .update(plainText)</span><br><span class="line">    .digest(<span class="string">"hex"</span>)</span><br><span class="line">    .toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交易完成後回傳資料使用的反向解密</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create_mpg_aes_decrypt</span>(<span class="params">TradeInfo</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> decrypt = crypto.createDecipheriv(<span class="string">"aes256"</span>, HashKey, HashIV);</span><br><span class="line">  decrypt.setAutoPadding(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">let</span> text = decrypt.update(TradeInfo, <span class="string">"hex"</span>, <span class="string">"utf8"</span>);</span><br><span class="line">  <span class="keyword">let</span> plainText = text + decrypt.final(<span class="string">"utf8"</span>);</span><br><span class="line">  <span class="keyword">let</span> result = plainText.replace(<span class="regexp">/[\x00-\x20]+/g</span>, <span class="string">""</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTradeInfo</span>(<span class="params">Amt, Desc, email</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"===== getTradeInfo ====="</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(Amt, Desc, email);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"=========="</span>);</span><br><span class="line"></span><br><span class="line">  data = &#123;</span><br><span class="line">    MerchantID: MerchantID, <span class="comment">// 商店代號</span></span><br><span class="line">    RespondType: <span class="string">"JSON"</span>, <span class="comment">// 回傳格式</span></span><br><span class="line">    TimeStamp: <span class="built_in">Date</span>.now(), <span class="comment">// 時間戳記</span></span><br><span class="line">    Version: <span class="number">1.5</span>, <span class="comment">// 串接程式版本</span></span><br><span class="line">    MerchantOrderNo: <span class="built_in">Date</span>.now(), <span class="comment">// 商店訂單編號</span></span><br><span class="line">    LoginType: <span class="number">0</span>, <span class="comment">// 智付通會員</span></span><br><span class="line">    OrderComment: <span class="string">"OrderComment"</span>, <span class="comment">// 商店備註</span></span><br><span class="line">    Amt: Amt, <span class="comment">// 訂單金額</span></span><br><span class="line">    ItemDesc: Desc, <span class="comment">// 產品名稱</span></span><br><span class="line">    Email: email, <span class="comment">// 付款人電子信箱</span></span><br><span class="line">    ReturnURL: ReturnURL, <span class="comment">// 支付完成返回商店網址</span></span><br><span class="line">    NotifyURL: NotifyURL, <span class="comment">// 支付通知網址/每期授權結果通知</span></span><br><span class="line">    ClientBackURL: ClientBackURL <span class="comment">// 支付取消返回商店網址</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"===== getTradeInfo: data ====="</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line"></span><br><span class="line">  mpg_aes_encrypt = create_mpg_aes_encrypt(data);</span><br><span class="line">  mpg_sha_encrypt = create_mpg_sha_encrypt(mpg_aes_encrypt);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"===== getTradeInfo: mpg_aes_encrypt, mpg_sha_encrypt ====="</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(mpg_aes_encrypt);</span><br><span class="line">  <span class="built_in">console</span>.log(mpg_sha_encrypt);</span><br><span class="line"></span><br><span class="line">  tradeInfo = &#123;</span><br><span class="line">    MerchantID: MerchantID, <span class="comment">// 商店代號</span></span><br><span class="line">    TradeInfo: mpg_aes_encrypt, <span class="comment">// 加密後參數</span></span><br><span class="line">    TradeSha: mpg_sha_encrypt,</span><br><span class="line">    Version: <span class="number">1.5</span>, <span class="comment">// 串接程式版本</span></span><br><span class="line">    PayGateWay: PayGateWay,</span><br><span class="line">    MerchantOrderNo: data.MerchantOrderNo</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"===== getTradeInfo: tradeInfo ====="</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(tradeInfo);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> tradeInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>GET /order/:id/payment</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getPayment: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"===== getPayment ====="</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(req.params.id);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"=========="</span>);</span><br><span class="line">  <span class="keyword">return</span> Order.findByPk(req.params.id, &#123;&#125;).then(<span class="function"><span class="params">order</span> =&gt;</span> &#123;</span><br><span class="line">      order.update(&#123;</span><br><span class="line">        ...req.body,</span><br><span class="line">        sn: tradeInfo.MerchantOrderNo, <span class="comment">//從購物餐車到取得付款頁面時，將 sn 更新，確立訂單成立。</span></span><br><span class="line">      &#125;).then(<span class="function"><span class="params">order</span> =&gt;</span> &#123;</span><br><span class="line">        res.render(<span class="string">'payment'</span>, &#123;order, tradeInfo&#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>Post /spgateway/callback</code></p><p>在 return 的結果中，<code>req.body.TradeInfo</code> 的 <code>Result</code>，會有紀錄 TradeNo 編號，我們使用這個交易編號，作為我們在資料庫 order 中撈資料的依據</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">spgatewayCallback: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"===== spgatewayCallback ====="</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(req.method); <span class="comment">// 總共四次，回傳前 post 3 次，確認電商網站是否正常。</span></span><br><span class="line">  <span class="built_in">console</span>.log(req.query); <span class="comment">// 回傳 &#123; from: NotifyURL&#125;，第四次回傳 &#123; from: ReturnURL&#125;</span></span><br><span class="line">  <span class="built_in">console</span>.log(req.body); <span class="comment">// 回傳的 object 解碼使用</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"=========="</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"===== spgatewayCallback: TradeInfo ====="</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(req.body.TradeInfo);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> data = <span class="built_in">JSON</span>.parse(create_mpg_aes_decrypt(req.body.TradeInfo))</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"===== spgatewayCallback: create_mpg_aes_decrypt、data ====="</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> Order.findAll(&#123;</span><br><span class="line">    where: &#123; <span class="attr">sn</span>: data[<span class="string">"Result"</span>][<span class="string">"MerchantOrderNo"</span>] &#125;</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">orders</span> =&gt;</span> &#123;</span><br><span class="line">    orders[<span class="number">0</span>]</span><br><span class="line">      .update(&#123;</span><br><span class="line">        ...req.body,</span><br><span class="line">        payment_status: <span class="number">1</span> <span class="comment">//在解密資料後修改付款狀態為真</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function"><span class="params">order</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> res.redirect(<span class="string">"/orders"</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;練習藍新金流，記錄實作步驟與需要的參數，參考 alpha camp 教材以及 &lt;a href=&quot;https://www.newebpay.c
      
    
    </summary>
    
      <category term="後端" scheme="https://ctaohe.github.io/categories/%E5%BE%8C%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="https://ctaohe.github.io/tags/javascript/"/>
    
      <category term="newebypay" scheme="https://ctaohe.github.io/tags/newebypay/"/>
    
  </entry>
  
  <entry>
    <title>Pagination 分頁實作</title>
    <link href="https://ctaohe.github.io/2019/09/03/2019-9-3_pagination/"/>
    <id>https://ctaohe.github.io/2019/09/03/2019-9-3_pagination/</id>
    <published>2019-09-02T16:00:00.000Z</published>
    <updated>2019-09-03T06:37:05.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>紀錄學習分頁的實作邏輯，將大量需要呈現的資訊分隔開來，避免造成瀏覽問題。</p><h2 id="邏輯"><a href="#邏輯" class="headerlink" title="邏輯"></a>邏輯</h2><p>在製作分頁的時候會需要使用到幾個要點，限制每頁需要的資料，在前往下一頁的時候需要使用偏移。</p><ul><li>limit: 限制資訊筆數</li><li>offset: 偏移量</li><li>page: 目前頁數</li><li>pages: 全部數到的頁數</li><li>totalPage: 將 pages 轉換成頁碼 array 方便前端渲染</li><li>previous: 往前一頁</li><li>next: 往後移頁</li></ul><p>搭配 <a href="https://sequelize.org/master/manual/querying.html#pagination---limiting" target="_blank" rel="noopener">sequelize</a> 提供的語法 offset、limit 來完成目的</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Fetch 10 instances/rows</span></span><br><span class="line">Project.findAll(&#123; <span class="attr">limit</span>: <span class="number">10</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Skip 8 instances/rows</span></span><br><span class="line">Project.findAll(&#123; <span class="attr">offset</span>: <span class="number">8</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Skip 5 instances and fetch the 5 after that</span></span><br><span class="line">Project.findAll(&#123; <span class="attr">offset</span>: <span class="number">5</span>, <span class="attr">limit</span>: <span class="number">5</span> &#125;);</span><br></pre></td></tr></table></figure><h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><ol><li>設定讀取筆數</li><li>宣告頁碼</li><li>宣告 offset 計算偏移量</li><li>計算總頁數(無條件進位) = 總資料數 / 讀取筆數</li><li>使用 array 寫進數量</li><li>使用判斷式，計算前一頁頁數</li><li>使用判斷式，計算下一頁頁數</li></ol><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>最初:<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 設定讀取筆數</span></span><br><span class="line"><span class="keyword">let</span> pagaLimit = <span class="number">10</span></span><br><span class="line"><span class="comment">// 宣告頁碼</span></span><br><span class="line"><span class="keyword">let</span> page = <span class="built_in">Number</span>(req.query.page) || <span class="number">1</span></span><br><span class="line"><span class="comment">// 宣告 offset 計算偏移量</span></span><br><span class="line"><span class="keyword">let</span> offset = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> (req.query.page) &#123;</span><br><span class="line">  offset = (req.query.page - <span class="number">1</span>) * pageLimit</span><br><span class="line">&#125;</span><br><span class="line">Project.findAndCountAll(&#123;<span class="attr">offest</span>: offset, <span class="attr">limit</span>: pagaLimit&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">projects</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 計算總頁數</span></span><br><span class="line">  <span class="keyword">let</span> pages = <span class="built_in">Math</span>.ceil( projects.count / pageLimit )</span><br><span class="line">  <span class="comment">// 產生 array</span></span><br><span class="line">  <span class="keyword">let</span> totalPage = <span class="built_in">Array</span>.from(&#123;<span class="attr">length</span>: pages&#125;).map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> index + <span class="number">1</span>)</span><br><span class="line">  <span class="comment">// 前一頁</span></span><br><span class="line">  <span class="keyword">let</span> prev = page - <span class="number">1</span> &lt; <span class="number">1</span> ? <span class="number">1</span> : page <span class="number">-1</span></span><br><span class="line">  <span class="comment">// 後一頁</span></span><br><span class="line">  <span class="keyword">let</span> next = page + <span class="number">1</span> &gt; pages ? pages : page + <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> res.render(<span class="string">'path'</span>, &#123;projects, page, totalPage, prev, next&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>第二次實作:<br>最後需要傳出 page、 totalPage、 prev、next，一樣會使用到 pagaLimit、page、offse、totalPage、prev、next。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 從其他地方傳入筆數</span></span><br><span class="line"><span class="keyword">let</span> pagaLimit = <span class="number">10</span></span><br><span class="line"><span class="keyword">const</span> middleware = &#123;</span><br><span class="line">  <span class="comment">// refactor 程式碼，先取得 page，跟要傳入資料庫的條件limiting。</span></span><br><span class="line">  pageInfo: <span class="function">(<span class="params">pageLimit, pageNumber = <span class="number">1</span></span>) =&gt;</span> &#123; <span class="comment">// pageNumber 預設 1</span></span><br><span class="line">    <span class="keyword">const</span> page = <span class="built_in">parseInt</span>(pageNumber) <span class="comment">// 轉型字串</span></span><br><span class="line">    <span class="keyword">const</span> limiting = &#123; <span class="attr">offset</span>: pageLimit * (page - <span class="number">1</span>), <span class="attr">limit</span>: pageLimit&#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// refactor 取得 totalPage，在找出資料後傳入，1.資料筆數、2.限制筆數、3.當前頁數</span></span><br><span class="line">  getPagination: <span class="function">(<span class="params">count, pageLimit, page</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> pages =  <span class="built_in">Math</span>.ceil(count / pageLimit) <span class="comment">// 筆數 / 限制筆數取得總頁數</span></span><br><span class="line">    <span class="comment">// 製作成 array 使用到 pages。</span></span><br><span class="line">    <span class="keyword">let</span> totalPage = <span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: pages &#125;, (item, index) =&gt; index + <span class="number">1</span>)</span><br><span class="line">    <span class="comment">// 前頁</span></span><br><span class="line">    <span class="keyword">let</span> prev = page - <span class="number">1</span> &lt; <span class="number">1</span> ? <span class="number">1</span> : page - <span class="number">1</span></span><br><span class="line">    <span class="comment">// 下頁</span></span><br><span class="line">    <span class="keyword">let</span> next = page + <span class="number">1</span> &gt; pages ? pages : page + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> &#123;totalPage, prev, next&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用的地方</span></span><br><span class="line"><span class="comment">// require middleware</span></span><br><span class="line"><span class="keyword">const</span> controller = &#123;</span><br><span class="line">  getInformation: <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; page, limiting &#125; = <span class="keyword">await</span> pageInfo(pageLimit, req.query.page)</span><br><span class="line">      <span class="keyword">const</span> projects = <span class="keyword">await</span> Project.findAndCountAll(limiting)</span><br><span class="line">      <span class="keyword">const</span> &#123;totalPage, prev, next&#125; = <span class="keyword">await</span> getPagination(projects.count, pageLimit, page)</span><br><span class="line">      <span class="keyword">return</span> res.render(<span class="string">'path'</span>, &#123;projects, page, totalPage, prev, next&#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>將目前學習到的分頁方式做個小整理，在未來希望能夠了解更多不同的做法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;紀錄學習分頁的實作邏輯，將大量需要呈現的資訊分隔開來，避免造成瀏覽問題。&lt;/p&gt;
&lt;h2 id=&quot;邏輯&quot;&gt;&lt;a href=&quot;#邏輯&quot; cla
      
    
    </summary>
    
      <category term="實作" scheme="https://ctaohe.github.io/categories/%E5%AF%A6%E4%BD%9C/"/>
    
    
      <category term="sequelize" scheme="https://ctaohe.github.io/tags/sequelize/"/>
    
      <category term="javascript" scheme="https://ctaohe.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Alpha Camp 了解產品設計思考與使用者體驗(下)</title>
    <link href="https://ctaohe.github.io/2019/08/19/2019-8-19_UXpart2/"/>
    <id>https://ctaohe.github.io/2019/08/19/2019-8-19_UXpart2/</id>
    <published>2019-08-18T16:00:00.000Z</published>
    <updated>2019-08-19T16:02:05.314Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>練習 empathize、define、prototype</p><ul><li>empathize: 訪談，製作 empathy map</li><li>define: 製作 persona</li><li>prototype: 撰寫簡單的 profuct spec，產品雛形的 user stories。</li></ul><p>產品設計師在使用同理與定義使用者時，常使用:</p><ul><li>使用者訪談(User Interview)</li><li>同理心地圖(Empathy Map)</li><li>人物誌(Persona)</li></ul><h2 id="如何定義目標受眾-Target-Audience-TA"><a href="#如何定義目標受眾-Target-Audience-TA" class="headerlink" title="如何定義目標受眾(Target Audience - TA)"></a>如何定義目標受眾(Target Audience - TA)</h2><p><code>當所有人都是你的目標受眾時，你其實沒有目標</code></p><h3 id="目標受眾的屬性-Attribute"><a href="#目標受眾的屬性-Attribute" class="headerlink" title="目標受眾的屬性(Attribute)"></a>目標受眾的屬性(Attribute)</h3><p>先思考我們是如何形容身邊的一個朋友，可以從 <code>屬性(attribute)</code>開始。</p><p>四個維度</p><ul><li>物理(Physical): <ul><li>性別、年齡</li><li>種族</li><li>地理位置</li><li>身高、體重</li><li>健康</li></ul></li><li>社會<ul><li>婚姻</li><li>生命階段</li><li>職業</li><li>薪資水平</li><li>組織和社交群體</li></ul></li><li>情感<ul><li>需求、慾望</li><li>夢想</li><li>興趣</li><li>正面情感</li><li>負面情感</li></ul></li><li>行為<ul><li>日常行程</li><li>購物模式</li><li>偏好</li><li>其他行為</li></ul></li></ul><p>從不同的維度，可以往不同的方向思考受眾屬性，如情感可以思考:甚麼導致他們恐懼、焦慮，他們的夢想、理想，他們重視的是甚麼。行為屬性則可以思考: 他們的上下班時間，購物習慣等等。</p><h2 id="同理心地圖-empathy-map-與人物誌-persona"><a href="#同理心地圖-empathy-map-與人物誌-persona" class="headerlink" title="同理心地圖(empathy map)與人物誌(persona)"></a>同理心地圖(empathy map)與人物誌(persona)</h2><h3 id="同理心地圖"><a href="#同理心地圖" class="headerlink" title="同理心地圖"></a>同理心地圖</h3><p><img src="https://lh3.googleusercontent.com/uSK8NknDpTC0KxMgLK07ntRV32sSqoEg6dUXjJdvdYRNfIAN4HZF9ME83sSQ-sGDVFlSEldncfK4RpQfwcQPNHg3wc9SehnhvSgSqEVkmPwrfklcaqhE7glDG4qFjYn9jt8d6X4nSk74SzAb0WoZBPJJ0nzdKkUk1tc2CWe-GNt-jikdbwEtH13Q1MFQsfr0KuOYbKHebVBIYqF1g8NEARoCiEaDiRntuyXkHtNW9I09g-S9u6AEPBFoNpG9Bw0lNi-bykl6eRWkfrR7jhEwHfg1TR8fZ_eZGMMtRadPDTXrMUZS3ODTPSKbm5NB1HhCcMfrV5cC6_DJ3HS0m7_YkbUo0YPs1g3q4oq4OtHUugDZj5ZtkuxZ1XqzaJwUbBj8Oy56rzIYWRCMglzEpzKVSILdxZbgE3KjnJTkkJrxRjXTMypgruH-gVgCi109nk9-C7VkbdS2FVBX2B1WuQDICWIAtZVsoUIJJ3uugNVOdizBwK6l7pr7ZrAAxr0YB37O6aYVRQ83t_GPxsOffOMjGCrNuguwXfwGl_3pjYZ714bMRXL16KaKolblQX1lJhCHDjKtB542kOr-Vcmg8I-s1WJ1EskPsMTDmpLT24YgcgKBoh9QrEYfCYkz9iT5jVeKDn0GoKTRusucNg2gfmuykRmIxseZZQ-htw16Sjw4lqruSS93FFc9pMplQbNlsDplHJZCVenuVUAMwCquX18wP_Ey=w584-h438-no" alt="empathy map"></p><p>主要有六大區塊:</p><ul><li>想法、感覺</li><li>聽到甚麼</li><li>看到甚麼</li><li>說或做了甚麼</li><li>痛苦</li><li>獲得</li></ul><p>在使用上先找到一位目標受眾，然後會先給予分析對象的名字、身分，在將資訊寫上同理心地圖。</p><h3 id="人物誌"><a href="#人物誌" class="headerlink" title="人物誌"></a>人物誌</h3><p>透過地圖收集的資訊，在整理後，我們可以為目標受眾定義一個 Persona。</p><p>製作人物誌是從真實使用者身上所調查得到的資訊，建構出一個代表目標群體的虛構人物，所以 Persona 要確切地反映出目標族群的屬性特徵、思考模式以及行為。</p><p>人物誌最大的用途是可以幫助我們在做產品設計決策時，擁有具體的想像與思考方向，所以建立好之後必須常常看它、使用它。</p><h2 id="訪談小技巧"><a href="#訪談小技巧" class="headerlink" title="訪談小技巧"></a>訪談小技巧</h2><p>為了從使用者身上收集到真實、有效的回饋，透過訪談技巧可以讓我們更容易取需要的資訊。</p><ul><li>找使用者做產品測試需要訪談，為求實際使用心得。</li><li>尋求合作機會需要訪談，為求了解對方是否值得信賴。</li><li>向業主接案需要訪談，為求了解需求。</li><li>向VC、天使投資人聊天也做訪談，了解對方對自己公司的真實看法。</li></ul><h3 id="核心想法與實際行為關係"><a href="#核心想法與實際行為關係" class="headerlink" title="核心想法與實際行為關係"></a>核心想法與實際行為關係</h3><p>如果了解受訪者的核心想法，就可以從對方的觀點、在設定的情境下推測想法與行為，從而知道結果。</p><p>不過在現實社會上，往往會有核心想法與實際行為會有所落差，所以藉由訪談過程，去慢慢了解受訪者，藉由各種小技巧幫助我們觸碰核心問題、想法。</p><h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><ol><li>設定清楚的訪談目的。</li><li>慎選挑選受訪者、了解目前狀態。</li><li>設計友善的訪談流程。</li><li>多使用開放式問答。</li><li>傾聽、觀察微訊息。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;練習 empathize、define、prototype&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;empathize: 訪談，製作 empathy ma
      
    
    </summary>
    
      <category term="UX" scheme="https://ctaohe.github.io/categories/UX/"/>
    
    
      <category term="user experience" scheme="https://ctaohe.github.io/tags/user-experience/"/>
    
  </entry>
  
  <entry>
    <title>Alpha Camp 了解產品設計思考與使用者體驗(上)</title>
    <link href="https://ctaohe.github.io/2019/08/19/2019-8-19_UXpart1/"/>
    <id>https://ctaohe.github.io/2019/08/19/2019-8-19_UXpart1/</id>
    <published>2019-08-18T16:00:00.000Z</published>
    <updated>2019-08-21T08:46:28.575Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>從工程師角度了解產品設計思考，寫程式碼在產品開發中屬於後期階段，在這之前須要整理出一些資訊</p><ul><li>產品規格 product specification</li><li>目標受眾 target audience</li><li>使用者故事 user stories</li></ul><p>再依據收集到的材料，進行思考將問題拆解並實作。</p><ul><li>想法到產品規格的流程及考量</li><li>產品設計中使用到的框架及工具</li><li>了解產品設計師的工作內容與目標</li><li>成功產品的關鍵因素有那些</li></ul><h2 id="使用者體驗-user-experience-UX"><a href="#使用者體驗-user-experience-UX" class="headerlink" title="使用者體驗(user experience - UX)"></a>使用者體驗(user experience - UX)</h2><p>在產品設計之前，必須先了解<code>使用者體驗</code>的概念，通常是指使用者對於產品及服務進行互動的過程、感覺。</p><p>每一種產品都會有自己的使用者體驗，對於網路開發而言，網頁的呈現都會隱約地透露出一些訊息，其重點就是， <strong>不違反一般人的使用習慣(直覺反應)</strong> 、 <strong>適當的給予小提示</strong></p><p>在使用產品過程中，體驗上的情感反應會影響使用者的下一步動作，當有負面情感時，在嚴重的情境下便會刪除軟件也是有可能的。</p><h2 id="思考設計-design-thinking"><a href="#思考設計-design-thinking" class="headerlink" title="思考設計(design thinking)"></a>思考設計(design thinking)</h2><p>思考設計是以人為本的設計精神與方法，考慮人的需求與行為亦考慮科技、商業的可行性。與是屬於較為感性分析的方法。而設計思考不是一個直線性、不回頭的過程，在這之中可能會需要反覆推導、測試，通常不會順暢的找到正確答案。</p><ul><li>Empathize 同理心</li><li>Define 定義問題</li><li>Ideate 創意</li><li>Prototype 製作原型</li><li>Test 測試</li></ul><p>我們可以透過 2W1H 去一步步實現這個工具的流程。</p><ol><li>WHY  該步驟的目標?</li><li>HOW  該步驟的具體作法?</li><li>WHAT 完成步驟會得到甚麼結果?</li><li>Key success factor 成功關鍵是甚麼?</li></ol><h3 id="Empathize"><a href="#Empathize" class="headerlink" title="Empathize"></a>Empathize</h3><p><strong>WHY?</strong></p><p>思考設計建立在兩個假設上</p><ul><li>產品為使用者打造</li><li>打造產品的人，其實不知道使用者真正需求</li></ul><p><strong>HOW?</strong></p><p>基於假設，我們要以同理心了解使用者動機、以及要解決的問題、需要達到的目的、以及使用感受。所以可以透過各種方法去達成，互動訪談、焦點團體(focus group)訪談、問卷調查、實際使用場景觀察。</p><p><strong>WHAT?</strong></p><p>完成這幾個步驟，就可以為目標使用者建立<code>同理心地圖(empathy map)</code>，透過地圖描述使用者思想、言行、感覺。 讓我們可以方便進行下個步驟 <code>Define</code></p><p><strong>KEY</strong></p><ul><li>開發團隊必須保持開方的學習心態。用心傾聽、忠實紀錄，不以預設立場過度解讀。</li></ul><h3 id="Define"><a href="#Define" class="headerlink" title="Define"></a>Define</h3><p><strong>WHY</strong></p><p>透過<code>定義</code>讓開發團隊可以了解手上的資料，聚焦在解決使用者的問題。</p><p><strong>HOW</strong></p><p>在這個步驟是總結使用者需求的<code>問題描述(problem statment)</code>，將收集到的資料，進行研究、討論、整理、收斂，換句話說是 架構、刪去、挖深、組合。</p><p><strong>WHAT?</strong></p><p>可以使用簡短的句子表達清楚的問題描述，一個清楚的問題描述包含: 使用者、需求、動機。</p><p>舉例:</p><ul><li>倉儲人員需要好用的工具提升理貨速度，因為想提早下班</li><li>上班族需要有地方能代收網購商品，因為上班地方不方便收貨</li></ul><p><strong>KEY</strong></p><ul><li>團隊每人都能清楚掌握使用者需求的定義和重點。</li><li>不追求標準答案，不思考結論是否正確，這個階段不需要驗證。</li></ul><h3 id="Ideate"><a href="#Ideate" class="headerlink" title="Ideate"></a>Ideate</h3><p><strong>WHY?</strong></p><p>透過<code>定義</code>，了解當前需要解決的問題後，就可以開始思考解決方案了</p><p><strong>HOW?</strong></p><p>創意發想方法很多種，例如:腦力激盪、專家訪談、<a href="https://zh.wikipedia.org/wiki/%E5%85%AD%E9%A1%B6%E6%80%9D%E8%80%83%E5%B8%BD%E5%AD%90" target="_blank" rel="noopener">六項思考帽</a></p><p>其中腦力激盪適當人數為 5~6 人，每人針對問題、需求、提出 2~3 個相對應解決想法。</p><p>tip: 脫口而出的是「創意」、想太多就會容易變成「規格」。在這一步，我們需要的是創意。</p><p><strong>WHAT?</strong></p><p>完成後可以得到初步的概念或答案:<br><em>產品</em> 是能讓 <em>某些族群</em> 在 <em>某種場合</em> 做/得/達到 <em>某種任務/目標/利益</em> ，與市場上的其他產品不同的地方在於 <em>產品差異化/競爭優勢</em></p><p><strong>KEY</strong></p><p>創意發想的過程有三不五要原則</p><ul><li>不批評</li><li>不打斷</li><li>不離題</li><li>要延續他人想法: 也就是鼓勵創意延伸，互相激發創意。</li><li>要畫圖: 將想到的點子寫下來、畫下來，多使用形容詞進行描述發想，少使用名詞。</li><li>要瘋狂、要數量: 對於點子越多越好，先不用擔心可行性</li><li>要下標題</li></ul><h3 id="Prototype"><a href="#Prototype" class="headerlink" title="Prototype"></a>Prototype</h3><p><strong>WHY?</strong></p><p>製作產品原型可以使開發更有效率， <code>產品原型</code>包含設計與開發。</p><p><strong>HOW?</strong></p><p>在製作的過程中會使用到 wireframe、mock-up 等工具。這是一個動手思考過程。</p><p><strong>WHAT?</strong></p><p>藉由簡略的草圖，作為不斷修整從而達到想要的效果，在這個階段的產品會將重要的功能/ user stories 全部展現出來、或是能夠操作。</p><p><strong>KEY</strong></p><p>不尋求完美，能夠快速製作出原型，藉由不斷修正達到完整效果，以相對較低的成本去探究實作可能的風險，從而考慮相對應的解決方案。</p><h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><p><strong>WHY?</strong></p><p>利用原型進行實際測試，透過原型與使用者進行互動、溝通。 讓我們更了解使用者、產品。</p><p><strong>HOW?</strong></p><p>通常會透過情境模擬，讓同一個使用者在此情境中完成多個任務，讓團隊可以從旁觀察使用者反映、了解使用狀況及回應。</p><p><strong>WHAT?</strong></p><p>最後根據觀察使用者的反應，重新定義(Define)需求或是改進，讓我們可以達到目的地，了解使用者，並開發出符合需求的產品。</p><p><strong>KEY</strong></p><p>開發團隊在測試階段與同理心階段相似，忠實紀錄，不為使用者遇到問題找理由。</p><h3 id="精神"><a href="#精神" class="headerlink" title="精神"></a>精神</h3><p>以 史丹佛大學(Standford University) D-School 設計思考訓練，提出的精神為</p><ul><li>以人為本: 以人為設計的出發點，以使用者觀點體驗。</li><li>及早失敗: 寧可在早期成本與時間投入相對較少的情況下，早點知道失敗並對其做相對應修正。</li><li>跨域團隊合作: 不同背景的成員具有不同專長、不同觀點。透過不同觀點容易激發出更多的創新。</li><li>做中學習: 實地動手做出原型。從實做的過程中，進一步的學習。</li><li>同理心: 如同使用者一樣的角度，理解他人，感同身受的體驗。</li><li>快速原型製作: 從簡易粗糙的模型開始，快速完成，以方便快速反應修正。</li></ul><h2 id="從購物體驗了解設計思考"><a href="#從購物體驗了解設計思考" class="headerlink" title="從購物體驗了解設計思考"></a>從購物體驗了解設計思考</h2><p>問題一：請在「不使用搜尋功能」的情況下，計時看看你分別花了多少時間在這兩個購物網站看到第一個適合放在陽台的曬衣架？</p><p>  不使用搜尋功能的條件下，我針對三個不同的日常用品進行搜尋，分別是曬衣架、果汁機、手機保護貼。<br>  其中秒數分別為<br>  PChome: 20秒、25秒、13秒 平均19秒<br>  蝦皮: 25秒、120秒、15秒 平均53秒</p><p>  在不使用搜尋的方式下，蝦皮的尋找的時間較長，是因為對於分類較為不熟悉所導致。</p><p>問題二：現在觀察 PChome 與蝦皮的首頁。請描述這兩個電商平台把產品分類的方法。</p><p>  PChome:<br>  導覽列:</p><ul><li>針對不同管理部門，給予不同的連結，線上購物、24h購物、購物中心、書店等等</li><li><p>在產品主分類大致為電器類、非電器類。第二層分類依照使用面向進行分類(電器類:通訊、數位、家電，非電器:日常、生活、食品、美妝)，在分類之下依照常用工具大分類。</p><p>頁面呈現</p></li><li>導覽列占總畫面多數，畫面以上方及左側皆使用分類導覽。</li><li><p>除導覽列之外，先讓各大項分類有進行各種促銷活動的商品進行呈現，在促銷商品之下，呈現使用者曾經搜尋過可能會需要的商品，最後呈現熱銷商品、非主要促銷的新降價產品。</p><p>蝦皮:</p></li><li>首頁主要先以促銷、活動擺在最上面，依序呈現產品分類、小活動、商城促銷、熱銷商品、最後才是隨機商品。</li><li>產品分類上電器用品(通訊與周邊、3C、家電)，非電器則將主要男女用品進行細分、及非電器的食衣住行用品。</li><li>在分類之下則是以商城擁有的大品牌為主要進行銷售，最後才會呈現個人賣家商品。</li></ul><p>問題三：針對都有在 PChome 與蝦皮上販售的同一樣產品，請問在哪個平台頁面中呈現給你的訊息較能幫助你進行決定？為什麼？</p><p>  依照同一商品來看<br>  PChome: </p><ul><li>價格</li><li>多種的付款管道、方式。</li><li>詳細的官方商品說明。</li><li>較固定的配送時間及運費。</li><li><p>退貨方式明確</p><p>蝦皮:</p></li><li>價格。</li><li>買家對於賣家及商品評價。</li><li>運費、出貨時間。</li><li><p>能與賣家溝通。</p><p>在都找的到同一產品情況下， PChome 對我而言會是比較容易去購買的管道，主因說明上較為清楚，運送時間較容易掌控，退貨機制明確方便。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;從工程師角度了解產品設計思考，寫程式碼在產品開發中屬於後期階段，在這之前須要整理出一些資訊&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;產品規格 produc
      
    
    </summary>
    
      <category term="UX" scheme="https://ctaohe.github.io/categories/UX/"/>
    
    
      <category term="user experience" scheme="https://ctaohe.github.io/tags/user-experience/"/>
    
  </entry>
  
  <entry>
    <title>Bubbling &amp; Capturing</title>
    <link href="https://ctaohe.github.io/2019/07/30/2019-7-31_JS_bubble/"/>
    <id>https://ctaohe.github.io/2019/07/30/2019-7-31_JS_bubble/</id>
    <published>2019-07-29T16:00:00.000Z</published>
    <updated>2019-07-31T15:29:29.184Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事件傳遞順序"><a href="#事件傳遞順序" class="headerlink" title="事件傳遞順序"></a>事件傳遞順序</h2><p>在啟動事件時，會逐層傳遞，順序不同各自為</p><ul><li>event bubbling: 由下而上，直到 document</li><li>event capturing: 由上而下</li></ul><h2 id="event-bubbling"><a href="#event-bubbling" class="headerlink" title="event bubbling"></a>event bubbling</h2><p>因為冒泡事件現象，為了防止點擊底層事件會影響到上層元素會使用 JS 的 event.StopPropagation()，阻止事件的傳播。</p><h2 id="event-capturing"><a href="#event-capturing" class="headerlink" title="event capturing"></a>event capturing</h2><p>由上而下的傳遞，可以讓事件順地的運作起來，所以通常不會去阻止，event capturing，但如果想要阻止可以將 useCapture 設為 true。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element.addEventListener(<span class="string">"click"</span>, handler, useCapture)</span><br></pre></td></tr></table></figure><p>示範<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>X<span class="tag">&lt;/<span class="name">span</span>&gt;</span> Go To Potions Class<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>X<span class="tag">&lt;/<span class="name">span</span>&gt;</span> Buy New Robes<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>X<span class="tag">&lt;/<span class="name">span</span>&gt;</span> Visit Hagrid<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(<span class="string">'span'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'span'</span>)</span><br><span class="line">event.stopPropagation() <span class="comment">// 阻止 bubbling</span></span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">'ul'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'ul'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">'#container'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'container'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">'body'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'body'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="keyword">const</span> span = <span class="built_in">document</span>.querySelector(<span class="string">'span'</span>)</span><br><span class="line"><span class="keyword">const</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>)</span><br><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.querySelector(<span class="string">'#container'</span>)</span><br><span class="line"><span class="keyword">const</span> body = <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>)</span><br><span class="line"></span><br><span class="line">span.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'span'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">ul.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ul'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">container.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'container'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">body.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'body'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;事件傳遞順序&quot;&gt;&lt;a href=&quot;#事件傳遞順序&quot; class=&quot;headerlink&quot; title=&quot;事件傳遞順序&quot;&gt;&lt;/a&gt;事件傳遞順序&lt;/h2&gt;&lt;p&gt;在啟動事件時，會逐層傳遞，順序不同各自為&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;event bubbling: 由下而上
      
    
    </summary>
    
      <category term="前端" scheme="https://ctaohe.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="https://ctaohe.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>The web develope bootcamp jQuery</title>
    <link href="https://ctaohe.github.io/2019/07/30/2019-7-30_jqery/"/>
    <id>https://ctaohe.github.io/2019/07/30/2019-7-30_jqery/</id>
    <published>2019-07-29T16:00:00.000Z</published>
    <updated>2019-07-31T09:05:05.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在現在的 JS 可以做到很多 jQuery 的事情，但是 jquery 已經存在有一段時間，在網路開發的路上隨處可見，而且有些使用上也是很方便，除了閱讀官方文件，藉由 udemy 課程更輕鬆的認識這個資料庫。</p><h2 id="Selecting-with-jQuery"><a href="#Selecting-with-jQuery" class="headerlink" title="Selecting with jQuery"></a>Selecting with jQuery</h2><p>在使用 jQuery 的時候，作為選擇器是使用 <code>$</code>，很方便的就可以選擇到要目標，而內容則是以 CSS 的方式作為選擇。可以選擇標籤 <code>h1</code>、<code>a</code> 或者 <code>.class</code>、<code>#id</code>，非常的直覺，假使現在有一個 h1，並要改變他的顏色可以這樣做。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"h1"</span>).css(<span class="string">"color"</span>, <span class="string">"yellow"</span>)</span><br></pre></td></tr></table></figure></p><p>結果會回傳 html 內所有符合條件的元素，加入一個 array 回傳顯示，而在 JS 可以使用 document.querySelector 做選擇。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'h1'</span>).style.color = <span class="string">'yellow'</span></span><br></pre></td></tr></table></figure><p>而有更明顯的例子可以看出 jquery 的方便性，利用 key-value pair</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> styles = &#123;</span><br><span class="line">  color: <span class="string">"red"</span>,</span><br><span class="line">  background: <span class="string">"pink"</span>,</span><br><span class="line">  border: <span class="string">"2px solid purple"</span></span><br><span class="line">&#125;</span><br><span class="line">$(<span class="string">"h1"</span>).css(styles)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 還可以這樣做</span></span><br><span class="line">$(<span class="string">'li'</span>).css(&#123;</span><br><span class="line">  fontSize: <span class="string">'10px'</span>,</span><br><span class="line">  border: <span class="string">'3px dashed purple'</span>,</span><br><span class="line">  background: <span class="string">'rgba(89, 45, 20, 0.5)'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果用 jQery 和 JS 來做類似的事情比較</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// jquery</span></span><br><span class="line">$(<span class="string">'li'</span>).css(<span class="string">'color'</span>, <span class="string">'green'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">const</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lis.length; i++)&#123;</span><br><span class="line">  lis[i].style.color = <span class="string">'green'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假設在 ul 裡面有兩個以上的 li 可以使用 first-of-type 選擇第一個元素 或者 使用不同的 <a href="https://api.jquery.com/category/selectors/child-filter-selectors/" target="_blank" rel="noopener">child-filter-selectors</a> </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'li:first-of-type'</span>)</span><br></pre></td></tr></table></figure><h2 id="jQuery-text-、html-、attr"><a href="#jQuery-text-、html-、attr" class="headerlink" title="jQuery text()、html()、attr()"></a>jQuery text()、html()、attr()</h2><p><a href="https://api.jquery.com/" target="_blank" rel="noopener">官網連結</a></p><p><code>html()</code>、<code>text()</code>、<code>attr()</code></p><p>使用 <a href="https://api.jquery.com/text/#text" target="_blank" rel="noopener">text()</a> ，單純使用文字，無法解析 html 標籤<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// if &lt;h1&gt;Test&lt;/h1&gt;</span></span><br><span class="line">$(<span class="string">'h1'</span>).text() <span class="comment">// 返回標籤內容' Test'，如果標籤是複數會串起來</span></span><br><span class="line">$(<span class="string">'h1'</span>).text(<span class="string">'New Test'</span>) <span class="comment">// 覆蓋成 New Test</span></span><br></pre></td></tr></table></figure></p><p>使用 <a href="https://api.jquery.com/html/#html" target="_blank" rel="noopener">html()</a>，可以解析 html 標籤<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// if &lt;h1&gt;Test&lt;/h1&gt;</span></span><br><span class="line">$(<span class="string">'h1'</span>).html() <span class="comment">// 返回 &lt;h1&gt;Test&lt;/h1&gt;</span></span><br><span class="line">$(<span class="string">'h1'</span>).html(<span class="string">'&lt;a href="https://github.com/cTaohe"&gt;我的github&lt;/a&gt;'</span>) <span class="comment">// h1變成成 &lt;h1&gt;&lt;a href="https://github.com/cTaohe"&gt;我的github&lt;/a&gt;&lt;/h1&gt;</span></span><br></pre></td></tr></table></figure></p><p>使用 <a href="https://api.jquery.com/attr/#attr-attributeName" target="_blank" rel="noopener">attr()</a>，假設我們html有圖片<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'img'</span>).css(<span class="string">'width'</span>, <span class="string">'500px'</span>)</span><br><span class="line"></span><br><span class="line">$(<span class="string">'img'</span>).attr(<span class="string">'scr'</span>) <span class="comment">//返回 scr 位址</span></span><br><span class="line">$(<span class="string">'img'</span>).attr(<span class="string">'scr'</span>, <span class="string">'網址'</span>) <span class="comment">// 修改成想要的網址，如果有多張圖片會全部變成一樣</span></span><br><span class="line">$(<span class="string">'img'</span>).last().attr(<span class="string">'scr'</span>, <span class="string">'網址'</span>) <span class="comment">// 修改多張圖片的最後一個</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'input'</span>)</span><br><span class="line"></span><br><span class="line">$(<span class="string">'input'</span>).attr(<span class="string">'type'</span>) <span class="comment">// 假設返回是 text</span></span><br><span class="line">$(<span class="string">'input'</span>).attr(<span class="string">'type'</span>, <span class="string">'checkbox'</span>) <span class="comment">// 修改成 checkbox</span></span><br></pre></td></tr></table></figure></p><p>使用 <a href="https://api.jquery.com/val/#val" target="_blank" rel="noopener">val()</a><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'input'</span>).val() <span class="comment">// 返回 input </span></span><br><span class="line">$(<span class="string">'input'</span>).val(<span class="string">'test'</span>) <span class="comment">// 把test 加到 input</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是 select 選單，可以返回 selected</span></span><br></pre></td></tr></table></figure></p><h2 id="Manipulating-Classes"><a href="#Manipulating-Classes" class="headerlink" title="Manipulating Classes"></a>Manipulating Classes</h2><p><code>addClass</code>、<code>removeClass</code>、<code>toggle</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增加 class</span></span><br><span class="line">$(<span class="string">'h1'</span>).addClass(<span class="string">'correct'</span>) <span class="comment">// &lt;h1&gt;test&lt;/h1&gt; =&gt; &lt;h1 class="correct"&gt;test&lt;/h1&gt;</span></span><br><span class="line">$(<span class="string">'h1'</span>).removeClass(<span class="string">'correct'</span>) <span class="comment">// &lt;h1 class="correct"&gt;test&lt;/h1&gt; =&gt; &lt;h1&gt;test&lt;/h1&gt;</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'h1'</span>).toggle(<span class="string">'correct'</span>) <span class="comment">// 結合 add remove 判斷 correct 做切換</span></span><br></pre></td></tr></table></figure><h2 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h2><p><code>click()</code>、<code>keypress()</code>、<code>on()</code></p><p>click<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 設定事件</span></span><br><span class="line">$(<span class="string">'h1'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'clicked!'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 複數按鈕 this 要用 $ 包覆</span></span><br><span class="line">$(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="keyword">this</span>).css(<span class="string">'background'</span>, <span class="string">'pink'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> text = $(<span class="keyword">this</span>).text()</span><br><span class="line">  <span class="built_in">console</span>.log(text) <span class="comment">//取得點擊的 text</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>keypress : 跟 click 很像但不一樣，keypress 在按下與放開之間的狀態，不是只是按下和放開<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 設定事件，這邊只假設有一個 input，每次 input 都會反饋</span></span><br><span class="line">$(<span class="string">'input'</span>).keypress(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'you pressed a key!'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回 object ，可以看到 keycode、 which、 charcode 按了甚麼按鈕的代號</span></span><br><span class="line">$(<span class="string">'input'</span>).keypress(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(event)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 對應 enter 觸發 alert</span></span><br><span class="line">$(<span class="string">'input'</span>).keypress(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (event.which === <span class="number">13</span>) &#123;</span><br><span class="line">    alert(<span class="string">'you hit enter'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>on 可以更簡單的使用 click、 mouseenter 等方法<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 設定事件，多個複數的 h1</span></span><br><span class="line">$(<span class="string">'h1'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="keyword">this</span>).css(<span class="string">'color'</span>, <span class="string">'purple'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按下按鈕</span></span><br><span class="line">$(<span class="string">'input'</span>).on(<span class="string">'keypress'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'keypress!'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 對應 mouseenter</span></span><br><span class="line">$(<span class="string">'button'</span>).on(<span class="string">'mouseenter'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'mouseenter!'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改變 button 狀態， 不過現在透過 css 可以做到類似效果更為方便</span></span><br><span class="line">$(<span class="string">'button'</span>).on(<span class="string">'mouseenter'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="keyword">this</span>).css(<span class="string">'font-weight'</span>, <span class="string">'bold'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">'button'</span>).on(<span class="string">'mouseleave'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="keyword">this</span>).css(<span class="string">'font-weight'</span>, <span class="string">'normal'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>fadeOut 使 html 的標籤 fade out， 可以用 ‘slow’ 的部分可以填寫毫秒 1000 等等。</p><p><code>fadeOut</code>、<code>fadeIn</code>、<code>fadeToggle</code><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ex1</span></span><br><span class="line">$(<span class="string">'button'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">'div'</span>).fadeOut(<span class="string">'slow'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fade completed'</span>) <span class="comment">// 會等 fadeout</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fade!!'</span>) <span class="comment">// 不會等 fadeout 結束，馬上就執行了</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ex2</span></span><br><span class="line">$(<span class="string">'button'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">'div'</span>).fadeOut(<span class="number">1000</span> , <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).remove() <span class="comment">// 移除標籤</span></span><br><span class="line">  &#125;)</span><br><span class="line">  $(<span class="string">'div'</span>).remove() <span class="comment">// 放外面不會等 fadeout ，所以不會有 fadeout 效果</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相反的 fadeIn</span></span><br><span class="line">$(<span class="string">'button'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">'div'</span>).fadeIn(<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// fadeToggle 直接判斷上面兩種狀態</span></span><br><span class="line">$(<span class="string">'button'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">'div'</span>).fadeToggle(<span class="number">500</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>slideUp、、slideDown、slideToggle 則是另外一種隱藏效果，可以直接在官網查詢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在現在的 JS 可以做到很多 jQuery 的事情，但是 jquery 已經存在有一段時間，在網路開發的路上隨處可見，而且有些使用上也是很方
      
    
    </summary>
    
      <category term="前端" scheme="https://ctaohe.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="jquery" scheme="https://ctaohe.github.io/tags/jquery/"/>
    
      <category term="javascript" scheme="https://ctaohe.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>The web develope bootcamp bootstrap navbar</title>
    <link href="https://ctaohe.github.io/2019/07/02/2019-7-2_bootstrap_navbar/"/>
    <id>https://ctaohe.github.io/2019/07/02/2019-7-2_bootstrap_navbar/</id>
    <published>2019-07-01T16:00:00.000Z</published>
    <updated>2019-07-03T08:30:38.253Z</updated>
    
    <content type="html"><![CDATA[<h2 id="認識-navbar"><a href="#認識-navbar" class="headerlink" title="認識 navbar"></a>認識 navbar</h2><p>Udemy The web develop bootcamp 課程，現在雖然是 bootstrap 4 為主流，根據講師所說，還是有一些公司使用 3，為了可以幫助這些公司轉換成 4，所以教學了兩個版本。實作主要先做 3。 bootstrap 是以 class name 賦予樣式 CSS及動態效果&#40;透過JS&#41;，4 比 3 能做更多的細節調整。</p><p>使用 nav 標籤，裡面元素 class 用 <code>navbar</code> 做為開頭，bootstrap 3，用 <code>navbar-default</code>/<code>navbar-inverse</code>，bootstrap 4 改使用 <code>navbar-light</code>/<code>navbar-dark</code> 之類改變navbar顏色，bootstrap 4，可以使用 <code>navbar-expend-breakpoint</code>，對應視窗大小做變化，在 breakopint 部分可改為 lg、 md、 sm，做更客製化改變。</p><p>在 3 使用 <code>navbar-toggle</code>，4 改用 <code>navbar-toggler</code> ，而 navbar 在預設狀態下不會包含margin-bottom、 border-radius設定。</p><p>bavbar-fixed-top，可以將導航列固定在上方，等於是使用了 position fixed 屬性。</p><p>bootstrap 3<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span>&gt;</span>Nav<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle collapsed"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">data-target</span>=<span class="string">"#bs-example-navbar-collapse-1"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse"</span> <span class="attr">id</span>=<span class="string">"bs-example-navbar-collapse-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar navbar-nav"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>home<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>contact<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>link<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar navbar-nav navbar-right"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>logOut<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>boostrap 4<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-light bg-light navbar-expend-xl"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span>&gt;</span>Nav<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar navbar-nav"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>home<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>contact<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>link<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar navbar-nav navbar-right"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>logOut<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>nav通常放在 <code>container</code> 外面，因為 container 有 margin auto 設定會使 navbar變小。</p><ul><li>navbar-header 中可以放 <code>nav-brand</code>已放置 logo 會呈現較大的樣式。</li><li>navbar-nav 作為標籤在 navbar 內容，連接著 navbar-header，有較小字體，需要的連結可以使用 ul list 包起來。</li><li>navbar-right、navbar-left，置左置右。</li><li>collapse navbar-collapse 會在自適應小螢幕時隱藏目錄，需要取 id 名 對應到 hamburger。在 hamburger 的 button　標籤中， class 取名 <code>navbar-toggle collapsed</code>，使用 <code>data-target</code> 對應到需要開關的標籤bs3，漢堡圖標使用span + class = icon-bar ，而 bs4 使用 <code>navbar-toggler</code>。</li><li>下拉式選單，<code>待新增</code></li></ul><h2 id="官方範例"><a href="#官方範例" class="headerlink" title="官方範例"></a>官方範例</h2><p>bootstrap 3<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Brand and toggle get grouped for better mobile display --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle collapsed"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#bs-example-navbar-collapse-1"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Brand<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Collect the nav links, forms, and other content for toggling --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse"</span> <span class="attr">id</span>=<span class="string">"bs-example-navbar-collapse-1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">aria-haspopup</span>=<span class="string">"true"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span>Dropdown <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"separator"</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"separator"</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>One more separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"navbar-form navbar-left"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Search"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">aria-haspopup</span>=<span class="string">"true"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span>Dropdown <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"separator"</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.navbar-collapse --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.container-fluid --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>bootstrap 4</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-expand-lg navbar-light bg-light"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Navbar<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"navbar-toggler"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#navbarSupportedContent"</span> <span class="attr">aria-controls</span>=<span class="string">"navbarSupportedContent"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span> <span class="attr">aria-label</span>=<span class="string">"Toggle navigation"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"navbar-toggler-icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse"</span> <span class="attr">id</span>=<span class="string">"navbarSupportedContent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"navbar-nav mr-auto"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item active"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Home <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item dropdown"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link dropdown-toggle"</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"navbarDropdown"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">aria-haspopup</span>=<span class="string">"true"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">          Dropdown</span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span> <span class="attr">aria-labelledby</span>=<span class="string">"navbarDropdown"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown-divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link disabled"</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">aria-disabled</span>=<span class="string">"true"</span>&gt;</span>Disabled<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-inline my-2 my-lg-0"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control mr-sm-2"</span> <span class="attr">type</span>=<span class="string">"search"</span> <span class="attr">placeholder</span>=<span class="string">"Search"</span> <span class="attr">aria-label</span>=<span class="string">"Search"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-outline-success my-2 my-sm-0"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;認識-navbar&quot;&gt;&lt;a href=&quot;#認識-navbar&quot; class=&quot;headerlink&quot; title=&quot;認識 navbar&quot;&gt;&lt;/a&gt;認識 navbar&lt;/h2&gt;&lt;p&gt;Udemy The web develop bootcamp 課程，現在雖然是 bo
      
    
    </summary>
    
      <category term="實作" scheme="https://ctaohe.github.io/categories/%E5%AF%A6%E4%BD%9C/"/>
    
    
      <category term="bootstrap" scheme="https://ctaohe.github.io/tags/bootstrap/"/>
    
      <category term="navbar" scheme="https://ctaohe.github.io/tags/navbar/"/>
    
  </entry>
  
  <entry>
    <title>The web develope bootcamp bootstrap flex</title>
    <link href="https://ctaohe.github.io/2019/07/02/2019-7-2_bootstrap_flex/"/>
    <id>https://ctaohe.github.io/2019/07/02/2019-7-2_bootstrap_flex/</id>
    <published>2019-07-01T16:00:00.000Z</published>
    <updated>2019-07-02T16:20:01.001Z</updated>
    
    <content type="html"><![CDATA[<p>了解 bootstrap flex 設定</p><h2 id="d-flex"><a href="#d-flex" class="headerlink" title="d-flex"></a>d-flex</h2><p>在 d-flex 的預設狀況下，包還在其中的物件，都是由左至右、由上至下看，也就是說使用 <code>justify-content</code> 的 start 是在右邊、 end 是中間、 end 是左邊，<code>align-items</code>的 start 是上方、 center 是中間、 end 是底部。</p><p>需要在不同大小的視窗模式下可以在d-&#123;breakpoint&#125;-flex，就可以在特定視窗大小下改變呈現方式。</p><p><code>justify-content</code>、<code>align-items</code> 的 <code>value</code> 中， between 為左右不留 margin 只算物件間隔平均分配 &amp; around 則是計算每個物件左右兩邊再均分。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- default buttons will stretch top to bottom --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container d-flex"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- botton normal --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container d-flex justify-content-start align-items-start"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- button middle(justify-content) center(align-content) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container d-flex justify-content-center align-items-center"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- button right bottom --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container d-flex justify-content-end align-items-end"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果是使用 <code>flex-row-reverse</code> 的時候，row 的部分會相反的看也就是，右邊到左邊，而上至下還是正常的。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- botton right and top--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container d-flex flex-row-reverse justify-content-start align-items-start"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- button middle(justify-cright) center(align-content) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container d-flex flex-row-reverse justify-content-center align-items-center"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- button left and bottom --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container d-flex flex-row-reverse justify-content-end align-items-end"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果是使用 <code>flex-column</code> 會發生甚麼事情呢? row 、 column 對調， <code>row</code> 變成看垂直的 <code>justify-content</code> 的 start 是在上方、 end 是中間、 end 是底部，<code>column</code>變成看水平的，<code>align-items</code>的 start 是左邊、 center 是中間、 end 是右邊。物件的排列方式也是從上排到下，而不是左排列到右。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- botton top(justify-cright) and right(align-items)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container d-flex flex-column justify-content-start align-items-start"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- button middle(justify-cright) center(align-content) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container d-flex flex-column justify-content-center align-items-center"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- button bottom(justify-cright) left(justify-cright) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container d-flex flex-column justify-content-end align-items-end"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="nav"><a href="#nav" class="headerlink" title="nav"></a>nav</h2><p>在 bootstrap 4 中的 <code>.nav</code> 與預設了 d-flex row 所以帶有 flexbox，設定上可以與上面所筆記的相同。</p><p>而要設定樣式可以:</p><ul><li>nav-tabs: 形成書籤樣式</li><li>nav-pills: 格子樣式，<code>nav-fill</code>、 <code>nav-justified</code> 都會填滿格子，只是 justified 的每個連結大小都會相同， fill 則是按照內容長度。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">設置 nav-tabs 的時候，點擊其他連結式不會有動作的，需要配合 JS 產生動態效果， 所以要帶入 `role=&quot;tablist&quot;`, `role=&quot;tab&quot;`, `role=&quot;tabpanel&quot;`，最外層使用 div 帶有 role=&quot;tablist&quot;，連結選項則帶有 role=&quot;tab&quot;，需要顯示的內容則帶有 role=&quot;tabpanel&quot;，並透過 `aria-` 屬性作為 DOM 操作指向標籤。</span><br></pre></td></tr></table></figure></li></ul><p>官方範例:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs"</span> <span class="attr">id</span>=<span class="string">"myTab"</span> <span class="attr">role</span>=<span class="string">"tablist"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link active"</span> <span class="attr">id</span>=<span class="string">"home-tab"</span> <span class="attr">data-toggle</span>=<span class="string">"tab"</span> <span class="attr">href</span>=<span class="string">"#home"</span> <span class="attr">role</span>=<span class="string">"tab"</span> <span class="attr">aria-controls</span>=<span class="string">"home"</span> <span class="attr">aria-selected</span>=<span class="string">"true"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link"</span> <span class="attr">id</span>=<span class="string">"profile-tab"</span> <span class="attr">data-toggle</span>=<span class="string">"tab"</span> <span class="attr">href</span>=<span class="string">"#profile"</span> <span class="attr">role</span>=<span class="string">"tab"</span> <span class="attr">aria-controls</span>=<span class="string">"profile"</span> <span class="attr">aria-selected</span>=<span class="string">"false"</span>&gt;</span>Profile<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link"</span> <span class="attr">id</span>=<span class="string">"contact-tab"</span> <span class="attr">data-toggle</span>=<span class="string">"tab"</span> <span class="attr">href</span>=<span class="string">"#contact"</span> <span class="attr">role</span>=<span class="string">"tab"</span> <span class="attr">aria-controls</span>=<span class="string">"contact"</span> <span class="attr">aria-selected</span>=<span class="string">"false"</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-content"</span> <span class="attr">id</span>=<span class="string">"myTabContent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-pane fade show active"</span> <span class="attr">id</span>=<span class="string">"home"</span> <span class="attr">role</span>=<span class="string">"tabpanel"</span> <span class="attr">aria-labelledby</span>=<span class="string">"home-tab"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-pane fade"</span> <span class="attr">id</span>=<span class="string">"profile"</span> <span class="attr">role</span>=<span class="string">"tabpanel"</span> <span class="attr">aria-labelledby</span>=<span class="string">"profile-tab"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-pane fade"</span> <span class="attr">id</span>=<span class="string">"contact"</span> <span class="attr">role</span>=<span class="string">"tabpanel"</span> <span class="attr">aria-labelledby</span>=<span class="string">"contact-tab"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>aria-labelledby</code> 指向 li 的 id。 <code>active</code>表示被選擇到的樣式變化，而被選擇到的時候 <code>aria-selected</code> 會從 false 變成 true。</p><p><a href="https://developers.google.com/web/fundamentals/accessibility/semantics-aria/aria-labels-and-relationships?hl=zh-tw" target="_blank" rel="noopener">aria 簡略介紹</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;了解 bootstrap flex 設定&lt;/p&gt;
&lt;h2 id=&quot;d-flex&quot;&gt;&lt;a href=&quot;#d-flex&quot; class=&quot;headerlink&quot; title=&quot;d-flex&quot;&gt;&lt;/a&gt;d-flex&lt;/h2&gt;&lt;p&gt;在 d-flex 的預設狀況下，包還在其中的物件，都
      
    
    </summary>
    
      <category term="實作" scheme="https://ctaohe.github.io/categories/%E5%AF%A6%E4%BD%9C/"/>
    
    
      <category term="bootstrap" scheme="https://ctaohe.github.io/tags/bootstrap/"/>
    
      <category term="flex" scheme="https://ctaohe.github.io/tags/flex/"/>
    
  </entry>
  
  <entry>
    <title>Session 、 Cookie、 OAuth &amp; Express middleware</title>
    <link href="https://ctaohe.github.io/2019/06/30/2019-6-30_%E8%A8%BB%E5%86%8A%E7%99%BB%E5%85%A5%E7%99%BB%E5%87%BA/"/>
    <id>https://ctaohe.github.io/2019/06/30/2019-6-30_註冊登入登出/</id>
    <published>2019-06-29T16:00:00.000Z</published>
    <updated>2019-07-02T16:09:54.324Z</updated>
    
    <content type="html"><![CDATA[<p>session 是一種辨識的機制，建立資料加上憑證後，藉由製作一組憑證，將憑證給予客戶端，下次客戶端造訪伺服端的時候，將憑證傳送回來做為辨識，使伺服器辨識出是哪個客戶端的機制。<br>如同店家有一個服務系統，對應獨一無二的編號，將編號內客戶喜好或資料存入，發送獨一無二的編號給予客戶，使得下次客戶造訪便得以藉由編號提供相對應的服務。</p><p>cookie 則是將 session 憑證存在客戶端，由客戶自己管理的一種方法，在需要的時候傳送回去伺服端表明身分。</p><h2 id="註冊"><a href="#註冊" class="headerlink" title="註冊"></a>註冊</h2><p>當瀏覽器使用者註冊路由向伺服器傳送請求時，伺服器會與資料庫帳號資料做比對，當比對不成功時，表示使用者為新申請者，會將接收到的新資料儲存起來，做為新帳號資料。</p><h2 id="登入"><a href="#登入" class="headerlink" title="登入"></a>登入</h2><p>當瀏覽器使用者使用使用登入路由時，向伺服器傳送請求，伺服器接收到請求與資料庫做為比對，當比對成功，就能夠進入使用服務的狀態。</p><p>使用服務的時候，使用者與客戶端不是處於保持連線的狀態，所以會使用到 session 機制，藉由客戶端存放在 cookie 中的 cookie-based session 憑證訊息，辨識使用者，以便回傳相對應資訊。就像是進到貴賓室而店家有紀錄對應客製化專屬服務一般。</p><h2 id="登出"><a href="#登出" class="headerlink" title="登出"></a>登出</h2><p>而登出服務則是牽扯到 cookie 存放 cookie-based session 憑證訊息，將存放在客戶端的資料清除，在下次造訪相同網站便沒有帶有憑證，導致網站認不出來而沒有專屬畫面。</p><p>就像是去了貴賓室卻無法表明身分，而無法使用客製化服務，只能使用一般服務。</p><p>甚麼是OAuth?使用OAuth好處?OAuth的流程有哪些腳色?<br>OAuth 是一種授權框架，允許應用程式在有限制的授權下將使用者的身分認證委派給帳戶管理的伺服端，如 Facebook、GitHub，提供給應用程式訪問帳號資訊的權利。</p><p>OAuth 提供更好的網路認證環境，應用程式信任身分資源提供者，藉由有限的授權下，藉由身分認證的提供者產生的 access token 對使用者進行身分認證，使用者可以快速使用，也減少應用程式方的工作程序。</p><p>OAuth則扮演著四種腳色<br>Resource Owner: 帳戶使用者<br>Client: 應用程式，需要被授權取得訪問帳號資訊的一方。<br>Resource / Authorization Server: resource server 擁有帳戶資料的伺服端，Authorization Server 發給 access tokens 給應用程式。</p><p>簡易流程</p><ul><li>應用程式向授權網站發出請求</li><li>授權網站要求帳戶使用者請求授權</li><li>帳戶使用者同意後。授權網站向應用程式發送 access token</li><li>應用程式向帳戶管理伺服端發送  access token 取得資料，核對無誤取得客戶資料、完成登入。</li></ul><p>簡單介紹 Express middleware? middleware有哪些種類? 流程簡述。</p><p>middleware 的意思是介於軟體與另一軟體的中間物，Express middleware 是一個功能函式，每次傳入請求時，都是由給予 middleware 的路由去控制，執行用來處理 request、response、next。<br>而每個 middleware 處理的功能皆有所不同，我們可以藉由 next method 將每個 middleware 串聯起來去完成所需要的結果。</p><ul><li>Application-level middleware: 使用 app.use() 和 app.METHOD() function</li><li>Router-level middleware: 執行方式如同 application-level middleware 但是被綁訂到 express.Router()</li><li>Error-handling middleware:使用時必須傳入四個參數 err、req、res、next，app.use((err, req, res, next))，即使不需要使用 next 參數也要加它加入。</li><li>Built-in middleware: 從版本4.X開始 Express 不再依賴 Connect ，可以使用 express.static、express.json、express.urlencoded。</li><li>Third-party middleware:使用 npn install package 安裝到 node.js module 使我們可以更方便的使用。</li></ul><p>middleware 簡易執行流程</p><ul><li>接收到 request 執行 middleware function</li><li>藉由 middleware 更新 request 和 response 物件</li><li>如果出現 error 拋出 error 中斷程序，停止 next 方法。</li><li>如果沒有問題 next 到下一個 middleware 最後 response 方法結束程序，回傳結果。</li></ul><p><a href="https://expressjs.com/en/guide/using-middleware.html#middleware.router" target="_blank" rel="noopener">express</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;session 是一種辨識的機制，建立資料加上憑證後，藉由製作一組憑證，將憑證給予客戶端，下次客戶端造訪伺服端的時候，將憑證傳送回來做為辨識，使伺服器辨識出是哪個客戶端的機制。&lt;br&gt;如同店家有一個服務系統，對應獨一無二的編號，將編號內客戶喜好或資料存入，發送獨一無二的編號
      
    
    </summary>
    
      <category term="後端" scheme="https://ctaohe.github.io/categories/%E5%BE%8C%E7%AB%AF/"/>
    
    
      <category term="OAuth" scheme="https://ctaohe.github.io/tags/OAuth/"/>
    
      <category term="Cookie" scheme="https://ctaohe.github.io/tags/Cookie/"/>
    
      <category term="Session" scheme="https://ctaohe.github.io/tags/Session/"/>
    
      <category term="Express middleware" scheme="https://ctaohe.github.io/tags/Express-middleware/"/>
    
  </entry>
  
  <entry>
    <title>OAuth</title>
    <link href="https://ctaohe.github.io/2019/06/27/2019-6-27_%E8%AA%8D%E8%AD%98OAuth/"/>
    <id>https://ctaohe.github.io/2019/06/27/2019-6-27_認識OAuth/</id>
    <published>2019-06-26T16:00:00.000Z</published>
    <updated>2019-07-02T16:28:54.895Z</updated>
    
    <content type="html"><![CDATA[<p>使用 Passport 認證策略中的，facebook 登入認證，透過 OAuth 2.0 機制，取得使用者同意後，使我們可以快速登入。</p><h2 id="OAuth"><a href="#OAuth" class="headerlink" title="OAuth"></a>OAuth</h2><p>處理流程中有四個角色</p><ul><li>資源擁有者: 帳號資料使用者。(User)</li><li>授權伺服器: 取得使用者許可後簽發 access token 的第三方網站(facebook&#125;</li><li>資源伺服器: 保管資源擁有者資料的伺服器(facebook)</li><li>客戶端: 使用者正在使用的第三方應用程式</li></ul><p>英文分別為: <code>Resource owner</code>、<code>Authorization server</code>、<code>Resource Server</code>、<code>Client</code></p><h2 id="實作步驟"><a href="#實作步驟" class="headerlink" title="實作步驟"></a>實作步驟</h2><ol><li>facebook for developers 上設定應用程式</li><li>安裝 Passport-Facebook</li><li>新增 auths 路由</li><li>app.js 載入路由</li><li>FacebookStrategy</li></ol><p>進入facebook for developers設置應用程式，選擇<code>整合 facebook 登入</code>，取得應用程式編號、應用程式密鑰。</p><h3 id="安裝-Passport-Facebook"><a href="#安裝-Passport-Facebook" class="headerlink" title="安裝 Passport-Facebook"></a>安裝 Passport-Facebook</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install passport-facebook</span><br></pre></td></tr></table></figure><h3 id="新增路由-auths-js-載入-app-js"><a href="#新增路由-auths-js-載入-app-js" class="headerlink" title="新增路由 auths.js 載入 app.js"></a>新增路由 auths.js 載入 app.js</h3><p>參考 <a href="https://github.com/jaredhanson/passport-facebook#authenticate-requests" target="_blank" rel="noopener">Passport</a></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">'/auth/facebook'</span>,</span><br><span class="line">  passport.authenticate(<span class="string">'facebook'</span>));</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/auth/facebook/callback'</span>,</span><br><span class="line">  passport.authenticate(<span class="string">'facebook'</span>, &#123; <span class="attr">failureRedirect</span>: <span class="string">'/login'</span> &#125;),</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Successful authentication, redirect home.</span></span><br><span class="line">    res.redirect(<span class="string">'/'</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>新增路由 routes/auths.js<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"><span class="keyword">const</span> passport = <span class="built_in">require</span>(<span class="string">'passport'</span>)</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/facebook'</span>,</span><br><span class="line">  passport.authenticate(<span class="string">'facebook'</span>, &#123;<span class="attr">scope</span>: [<span class="string">'email'</span>, <span class="string">'public_profile'</span>]&#125;)</span><br><span class="line">)</span><br><span class="line">router.get(<span class="string">'/facebook/callback'</span>,</span><br><span class="line">  passport.authenticate(<span class="string">'facebook'</span>, &#123;</span><br><span class="line">    successRedirect: <span class="string">'/'</span>,</span><br><span class="line">    failureRedirect: <span class="string">'/users/login'</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure></p><p>app.js 載入 routes/auths.js<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(<span class="string">'/users'</span>, <span class="built_in">require</span>(<span class="string">'./routes/user'</span>))     </span><br><span class="line">app.use(<span class="string">'/auth'</span>, <span class="built_in">require</span>(<span class="string">'./routes/auths'</span>)) <span class="comment">//加入</span></span><br></pre></td></tr></table></figure></p><h3 id="FacebookStrategy"><a href="#FacebookStrategy" class="headerlink" title="FacebookStrategy"></a>FacebookStrategy</h3><p>在 passport middleware 加入 facebookStrategy</p><p><a href="https://github.com/jaredhanson/passport-facebook#configure-strategy" target="_blank" rel="noopener">官方文件</a></p><p>審核創建新使用者<br>config/passport.js<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> LocalStrategy = <span class="built_in">require</span>(<span class="string">'passport-local'</span>).Strategy <span class="comment">// passport-local</span></span><br><span class="line"><span class="keyword">const</span> FacebookStrategy = <span class="built_in">require</span>(<span class="string">'passport-facebook'</span>).Strategy <span class="comment">//passport-facebook</span></span><br><span class="line"><span class="keyword">const</span> bcrypt = <span class="built_in">require</span>(<span class="string">'bcryptjs'</span>)</span><br><span class="line"><span class="keyword">const</span> User = <span class="built_in">require</span>(<span class="string">'../models./user'</span>) </span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">passport</span> =&gt;</span> &#123;</span><br><span class="line">  passport.use(</span><br><span class="line">    <span class="keyword">new</span> LocalStrategy(&#123;<span class="attr">usernameField</span>: <span class="string">'email'</span>&#125;, (email, password, done)=&gt; &#123;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">  passport.use(<span class="keyword">new</span> FacebookStrategy(&#123;</span><br><span class="line">    clientID: process.env.FACEBOOK_ID,</span><br><span class="line">    clientSecret: process.env.FACEBOOK_SECRET,</span><br><span class="line">    callbackURL: process.env.FACEBOOK_CALLBACK,</span><br><span class="line">    profileFields: [<span class="string">'email'</span>, <span class="string">'displayName'</span>]</span><br><span class="line">  &#125;,(accessToken, refreshToken, profile, done) =&gt; &#123;</span><br><span class="line">      User.findOne(&#123;</span><br><span class="line">        email: profile._json.email</span><br><span class="line">      &#125;).then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">          <span class="keyword">const</span> randomPassword = <span class="built_in">Math</span>.random(<span class="number">36</span>).slice(<span class="number">-8</span>)</span><br><span class="line">          bcrypt.genSalt(<span class="number">10</span>, (err, salt) =&gt;</span><br><span class="line">            bcrypt.hash(randomPassword, salt, (err, hash) =&gt;&#123;</span><br><span class="line">              <span class="keyword">const</span> newUser = User(&#123;</span><br><span class="line">                name: profile._json.name,</span><br><span class="line">                email: profile._json.email,</span><br><span class="line">                password: hash</span><br><span class="line">              &#125;)</span><br><span class="line">              newUser.save().then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> done(<span class="literal">null</span>, user)</span><br><span class="line">              &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err)</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">          )</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> done(<span class="literal">null</span>, user)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="隱藏敏感資訊"><a href="#隱藏敏感資訊" class="headerlink" title="隱藏敏感資訊"></a>隱藏敏感資訊</h2><p>將應用程式的編碼以及程式密鑰等敏感資訊，隱藏起來</p><p>使用 <code>環境變數(environment variable)</code> 管理資訊，藉由讀取環境變數去知道作業系統的資訊。</p><h3 id="實作步驟-1"><a href="#實作步驟-1" class="headerlink" title="實作步驟"></a>實作步驟</h3><ol><li>安裝 dotenv</li><li>隱藏資訊設定為變數，寫進env</li><li>config/passport.js 用相同變數取代敏感資訊。</li><li>在 app.js 增加應用程式執行模式邏輯</li><li>.env加入 .gitignore</li><li>檢查登入</li></ol><h4 id="安裝-dotenv"><a href="#安裝-dotenv" class="headerlink" title="安裝 dotenv"></a>安裝 dotenv</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install dotenv</span><br></pre></td></tr></table></figure><h4 id="修改-config-passport-js-及-新增-env"><a href="#修改-config-passport-js-及-新增-env" class="headerlink" title="修改 config/passport.js 及 新增.env"></a>修改 config/passport.js 及 新增.env</h4><p>config/passport.js 已在上方做修改<br>將資訊放入.env，xxxxxxxx 找自己應用程式編號及密鑰<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// .env</span><br><span class="line">FACEBOOK_ID=xxxxxxxx</span><br><span class="line">FACEBOOK_SECRET=xxxxxxxx</span><br><span class="line">FACEBOOK_CALLBACK=http://localhost:3000/auth/facebook/callback</span><br></pre></td></tr></table></figure></p><h4 id="判別環境"><a href="#判別環境" class="headerlink" title="判別環境"></a>判別環境</h4><p>如果 程式不是在線上正式執行就透過 dotnev 讀取檔案</p><p>app.js<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (precess.env.NODE_ENV !== <span class="string">'porduction'</span>)&#123; <span class="comment">// 如果不是產品模式</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'dotenv'</span>).config() <span class="comment">// dotenv 執行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最後將 .env 加入 .gitignore</p><h2 id="新增-FB-按鈕"><a href="#新增-FB-按鈕" class="headerlink" title="新增 FB 按鈕"></a>新增 FB 按鈕</h2><p>修改 login 樣板，加入連結。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/auth/facebook"</span>&gt;</span>FB login<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="partials-樣板"><a href="#partials-樣板" class="headerlink" title="partials 樣板"></a>partials 樣板</h2><p>使用 connect-flash，使用 res 的 res.locals 將資訊傳到 view</p><p>在 app.js 載入<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> flash =<span class="built_in">require</span>(<span class="string">'connect-flash'</span>)</span><br><span class="line"></span><br><span class="line">app.use(flash())</span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.locals.user = req.user</span><br><span class="line">  res.locals.isAuthenticated = req.isAuthenticated()</span><br><span class="line"></span><br><span class="line">  res.locals.success_msg = req.flash(<span class="string">'success_msg'</span>)</span><br><span class="line">  res.locals.warning_msg = req.flash(<span class="string">'warning_msg'</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>使用handlebars &#123;&#123;&gt; myPartial &#125;&#125; 將顯示加入。</p><p>使用者權限訊息加入 auth middleware 中<br>config/auth.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line">  authenticated: <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.isAuthenticated()) &#123;</span><br><span class="line">      <span class="keyword">return</span> next</span><br><span class="line">    &#125;</span><br><span class="line">    req.flash(<span class="string">'warning_msg'</span>, <span class="string">'請先登入'</span>)</span><br><span class="line">    res.redirect(<span class="string">'/users/login'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>user.js<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 檢查註冊</span></span><br><span class="line">router.post(<span class="string">'register'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;name, email, password, password2&#125; = req.body</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> errors = []</span><br><span class="line">  <span class="keyword">if</span> (!name || !email || !password || !password2) &#123;</span><br><span class="line">    errors.push(&#123; <span class="attr">message</span>: <span class="string">'所有欄位都是必填'</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (password !== password2) &#123;</span><br><span class="line">    errors.push(&#123; <span class="attr">message</span>: <span class="string">'密碼輸入錯誤'</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (errors.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    res.render(<span class="string">'register'</span>, &#123;</span><br><span class="line">      errors,</span><br><span class="line">      name,</span><br><span class="line">      email,</span><br><span class="line">      password,</span><br><span class="line">      password2</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    User.findOne(&#123; <span class="attr">email</span>: email &#125;).then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (user) &#123;</span><br><span class="line">        <span class="comment">// 加入訊息提示</span></span><br><span class="line">        errors.push(&#123; <span class="attr">message</span>: <span class="string">'這個 Email 已經註冊過了'</span> &#125;)</span><br><span class="line">        res.render(<span class="string">'register'</span>, &#123;</span><br><span class="line">          errors,</span><br><span class="line">          name,</span><br><span class="line">          email,</span><br><span class="line">          password,</span><br><span class="line">          password2</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> newUser = <span class="keyword">new</span> User(&#123;</span><br><span class="line">          name,</span><br><span class="line">          email,</span><br><span class="line">          password</span><br><span class="line">        &#125;)</span><br><span class="line">        bcrypt.genSalt(<span class="number">10</span>, (err, salt) =&gt;</span><br><span class="line">          bcrypt.hash(newUser.password, salt, (err, hash) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">            newUser.password = hash</span><br><span class="line"></span><br><span class="line">            newUser</span><br><span class="line">              .save()</span><br><span class="line">              .then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">                res.redirect(<span class="string">'/'</span>)</span><br><span class="line">              &#125;)</span><br><span class="line">              .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</span><br><span class="line">          &#125;)</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用 Passport 認證策略中的，facebook 登入認證，透過 OAuth 2.0 機制，取得使用者同意後，使我們可以快速登入。&lt;/p&gt;
&lt;h2 id=&quot;OAuth&quot;&gt;&lt;a href=&quot;#OAuth&quot; class=&quot;headerlink&quot; title=&quot;OAuth&quot;
      
    
    </summary>
    
      <category term="實作" scheme="https://ctaohe.github.io/categories/%E5%AF%A6%E4%BD%9C/"/>
    
    
      <category term="OAuth" scheme="https://ctaohe.github.io/tags/OAuth/"/>
    
      <category term="partials" scheme="https://ctaohe.github.io/tags/partials/"/>
    
  </entry>
  
  <entry>
    <title>認證功能-登入</title>
    <link href="https://ctaohe.github.io/2019/06/27/2019-6-27_%E8%AA%8D%E8%AD%89%E7%99%BB%E5%85%A5/"/>
    <id>https://ctaohe.github.io/2019/06/27/2019-6-27_認證登入/</id>
    <published>2019-06-26T16:00:00.000Z</published>
    <updated>2019-06-27T15:16:47.618Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Session-amp-Cookie"><a href="#Session-amp-Cookie" class="headerlink" title="Session &amp; Cookie"></a>Session &amp; Cookie</h2><h3 id="甚麼是-Session"><a href="#甚麼是-Session" class="headerlink" title="甚麼是 Session?"></a>甚麼是 Session?</h3><p>追蹤同一使用者透過瀏覽器發出的連續請求時，可以製作一組憑證，紀錄設備間的交流，這種機制叫 session。</p><p>session 是擁有所有使用者登入紀錄的龐大物件，物件裡都是 <code>key-value pair</code>， session id(sid)、 value(session_data)。 如同飲料店(伺服器)的會員機制。</p><p>存放 session 物件的地方稱為 session store。</p><h3 id="甚麼是-Cookie"><a href="#甚麼是-Cookie" class="headerlink" title="甚麼是 Cookie?"></a>甚麼是 Cookie?</h3><p>cookie，以飲料店的會員卡為例， cookie 為會員卡，通常會員卡放在皮夾中，皮夾即為瀏覽器。</p><p>瀏覽器讓伺服器可以把 session id 存在瀏覽器的 cookie 上，使瀏覽器每次對伺服器發送請求時，都帶有cookie資訊，於是伺服器可以透過 cookie 取得 session id。</p><h3 id="使用-dev-tool-打開-network"><a href="#使用-dev-tool-打開-network" class="headerlink" title="使用 dev tool 打開 network"></a>使用 dev tool 打開 network</h3><p>打開看伺服器傳給瀏覽器的 <code>Response Headers</code>，可以發現 <code>set-cookie</code>，這串特殊編，解譯後會包含session id。</p><p><code>Response Headers</code> 中的 <code>cookie</code>長串訊息，包含著上次伺服器告訴瀏覽器的通關密碼。 所以這次 <code>request-response</code> 流程， 瀏覽器把這段密碼放到 cookie 傳送給伺服器，於是伺服器就可以辨識出是哪個瀏覽器了。</p><h3 id="session-安全性"><a href="#session-安全性" class="headerlink" title="session 安全性"></a>session 安全性</h3><p>如果 session id 被盜用，被放到另外一個 cookie 中，將 session id 修改成跟你一樣，就可以在不需要登入的狀況下操作他人帳號。</p><p>最普遍防止方法是透過 <code>簽章(signature)</code>，在伺服器端，開發者設定 <code>密鑰(secret)</code>， 與要傳送出去的 session id 透過認證演算法整合，產生一組邊碼將之存在 cookie。</p><p>於是伺服器端可以使用 secret，還原 session id，如果被惡意篡改，還原會發生錯誤而導致比對無效。</p><h2 id="登入功能"><a href="#登入功能" class="headerlink" title="登入功能"></a>登入功能</h2><p>實務上稱為 <code>使用者認證(user authentication)</code>。 建立登入功能，其中簡單的方法是如同註冊功能，檢查資料庫使用者註冊過的資料，使用 <code>User.findOne</code>查詢資料庫，再 <code>比對密碼是否正確</code>。</p><p>另一種做法使用 Express-session 與 passport，皆為 middleware。</p><h3 id="Express-session"><a href="#Express-session" class="headerlink" title="Express-session"></a><a href="https://www.npmjs.com/package/express-session" target="_blank" rel="noopener">Express-session</a></h3><p>建立 session 的 middleware，使用 session(option)。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(session(&#123;</span><br><span class="line">  secret: <span class="string">'xxxxxx'</span>,</span><br><span class="line">  resave: <span class="literal">false</span>,</span><br><span class="line">  saveUninitialized: <span class="literal">true</span>,</span><br><span class="line">  cookie: &#123; <span class="attr">secure</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p>以上四個參數都是 session middleware 提供的 <code>參數(option)</code> 之一，未來將用以載入，放在修改 app.js 部分。</p><p>secret 是可以用來自訂的通關密語，會與資訊做認證演算法整合。</p><h3 id="Passport"><a href="#Passport" class="headerlink" title="Passport"></a><a href="http://www.passportjs.org/" target="_blank" rel="noopener">Passport</a></h3><p>使用來完成認證功能的 middleware。</p><h4 id="Passport-Strategies"><a href="#Passport-Strategies" class="headerlink" title="Passport Strategies"></a>Passport Strategies</h4><p>Passport 須配合<code>認證策略(strategies)</code>，passport 目前提供超過500種認證策略，讓開法者可以容易將自己產品與各種大型平台服務整合。</p><h4 id="設定策略語法-configure-strategy"><a href="#設定策略語法-configure-strategy" class="headerlink" title="設定策略語法(configure strategy)"></a>設定策略語法(configure strategy)</h4><p>passport-local 本地策略的<a href="https://github.com/jaredhanson/passport-local#configure-strategy" target="_blank" rel="noopener">策略語法</a></p><h4 id="Serialize-與-deserialize"><a href="#Serialize-與-deserialize" class="headerlink" title="Serialize 與 deserialize"></a>Serialize 與 deserialize</h4><p>Passport 的序列化會把 <code>使用者實例(user instance)</code> 轉化為字串存在伺服器端的 session 資料。</p><p>反序列化是透過 session 資料，取回擁有 login session 的使用者實例。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 序列化</span></span><br><span class="line">passport.serializerUser(<span class="function"><span class="keyword">function</span> (<span class="params">user, done</span>)</span>&#123;</span><br><span class="line">  done(<span class="literal">null</span>, user.id)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 反序列化</span></span><br><span class="line">passport.derserializerUser(<span class="function"><span class="keyword">function</span> (<span class="params">id, done</span>)</span>&#123;</span><br><span class="line">  user.findById(id, <span class="function"><span class="keyword">function</span> (<span class="params">err, user</span>)</span>&#123;</span><br><span class="line">    done(err,user)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="登入認證實作步驟"><a href="#登入認證實作步驟" class="headerlink" title="登入認證實作步驟"></a>登入認證實作步驟</h2><ol><li>安裝 passport、passport-local、express-session</li><li>新增config資料夾，命名 passport.js</li><li>修改 app.js 使用 passport、 express-session</li><li>修改使用者路由 routes/user.js</li></ol><h3 id="安裝-middleware"><a href="#安裝-middleware" class="headerlink" title="安裝 middleware"></a>安裝 middleware</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install passport passport-local express-session</span><br></pre></td></tr></table></figure><h3 id="建立-passport-middleware-in-config-passport-js"><a href="#建立-passport-middleware-in-config-passport-js" class="headerlink" title="建立 passport middleware in config/passport.js"></a>建立 passport middleware in config/passport.js</h3><p>關注點分離，新增config資料夾，命名 passport.js，載入 middleware、model，宣告 LocalStrategy 物件， 引入官方語法，定義usernameField 為 email(以 email 代表用戶名稱)。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> LocalStrategy =<span class="built_in">require</span>(<span class="string">'passport-local'</span>).Strategy</span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// include User model</span></span><br><span class="line"><span class="keyword">const</span> User = <span class="built_in">require</span>(<span class="string">'../models/user'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">passport</span> =&gt;</span> &#123;</span><br><span class="line">  passport.use(</span><br><span class="line">    <span class="keyword">new</span> LocalStrategy(&#123; <span class="attr">usernameField</span>: <span class="string">'email'</span> &#125;, (email, password, done) =&gt; &#123; <span class="comment">// use LocalStrategy</span></span><br><span class="line">      User.findOne(&#123;</span><br><span class="line">        email: email</span><br><span class="line">      &#125;).then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">          <span class="keyword">return</span> done(<span class="literal">null</span>, <span class="literal">false</span>, &#123;<span class="attr">message</span>: <span class="string">'That email is not registered'</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (user.password != password) &#123;</span><br><span class="line">          <span class="keyword">return</span> done(<span class="literal">null</span>, <span class="literal">false</span>, &#123;<span class="attr">message</span>: <span class="string">'Email or Password incorrect'</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> done(<span class="literal">null</span>, user)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 序列化</span></span><br><span class="line">  passport.serializerUser(<span class="function"><span class="keyword">function</span> (<span class="params">user, done</span>)</span>&#123;</span><br><span class="line">    done(<span class="literal">null</span>, user.id)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 反序列化</span></span><br><span class="line">  passport.derserializerUser(<span class="function"><span class="keyword">function</span> (<span class="params">id, done</span>)</span>&#123;</span><br><span class="line">    user.findById(id, <span class="function"><span class="keyword">function</span> (<span class="params">err, user</span>)</span>&#123;</span><br><span class="line">      done(err,user)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改-app-js"><a href="#修改-app-js" class="headerlink" title="修改 app.js"></a>修改 app.js</h3><ol><li>載入 express-session、passport middleware</li><li>使用 app.use 初始化使用 session、passport</li><li>載入 config/passport.js，設定一個 local variable 儲存 user</li></ol><p><code>2019-6-27</code> : 新增變數，這個變數的值會從瀏覽器傳到伺服器，讓伺服器知道使用者是否已經登入。</p><p>變數: <code>req.local.isAuthenticated</code> ，<a href="https://github.com/jaredhanson/passport/blob/master/lib/http/request.js#L83" target="_blank" rel="noopener">isAuthenticated</a> 是現成方法， 在設定認證也有相關內容。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>)</span><br><span class="line"><span class="keyword">const</span> passport = <span class="built_in">require</span>(<span class="string">'passport'</span>)</span><br><span class="line"></span><br><span class="line">app.use(session(&#123; <span class="comment">//使用者認證</span></span><br><span class="line">  secret: <span class="string">'your secret word'</span> <span class="comment">// 這裡只用 secret</span></span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 passport 使用 passport session(放在 session 之後)</span></span><br><span class="line">app.use(passport.initialize())</span><br><span class="line">app.use(possport.session())</span><br><span class="line"></span><br><span class="line"><span class="comment">// passport config 引入前面產生的session id所產生的值，從 req.user 放在 res.local 裡面</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./config/passport'</span>)(passport) <span class="comment">// passport instance 套件引入瀏覽器中的 session id(passport)</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.locals.user = req.user</span><br><span class="line">  res.locals.isAuthenticated = req.isAuthenticated <span class="comment">// 加入到這，讓 view可以使用</span></span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="修改路由-routes-user-js-and-controller"><a href="#修改路由-routes-user-js-and-controller" class="headerlink" title="修改路由 routes/user.js and controller"></a>修改路由 routes/user.js and controller</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"><span class="keyword">const</span> passport = <span class="built_in">require</span>(<span class="string">'passport'</span>) <span class="comment">// 載入 passport</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 登入</span></span><br><span class="line">router.get(<span class="string">'/login'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.render(<span class="string">'login'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 送出檢查</span></span><br><span class="line">router.post(<span class="string">'/login'</span>, (req, res, next) =&gt; &#123; <span class="comment">// 增加下一棒 next</span></span><br><span class="line">  passport.authenticate(<span class="string">'local'</span>, &#123;</span><br><span class="line">    successRedirect: <span class="string">'/'</span>, <span class="comment">//成功 轉到跟目錄</span></span><br><span class="line">    failureRedirect: <span class="string">'/users/login'</span> <span class="comment">// 失敗 到登入頁面</span></span><br><span class="line">  &#125;)(req, res, next)</span><br></pre></td></tr></table></figure><h2 id="修改登入頁面"><a href="#修改登入頁面" class="headerlink" title="修改登入頁面"></a>修改登入頁面</h2><p>由於使用 handlebars 所以在 template 的地方加入相關語法可以使登出登入按鈕有所變化，而這變化是吃最後在 app.js 中 app.use 有設定到抓取 req.isAuthenticated 的程式碼。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;#if isAuthenticated&#125;&#125;</span><br><span class="line">  &lt;a href=&quot;/users/logout&quot;&gt;Logout&lt;/a&gt;</span><br><span class="line">&#123;&#123;else&#125;&#125;</span><br><span class="line">  &lt;a href=&quot;/users/login&quot;&gt;Login&lt;/a&gt;</span><br><span class="line">&#123;&#123;/if&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Session-amp-Cookie&quot;&gt;&lt;a href=&quot;#Session-amp-Cookie&quot; class=&quot;headerlink&quot; title=&quot;Session &amp;amp; Cookie&quot;&gt;&lt;/a&gt;Session &amp;amp; Cookie&lt;/h2&gt;&lt;h3 i
      
    
    </summary>
    
      <category term="實作" scheme="https://ctaohe.github.io/categories/%E5%AF%A6%E4%BD%9C/"/>
    
    
      <category term="passport.js" scheme="https://ctaohe.github.io/tags/passport-js/"/>
    
      <category term="passport-local" scheme="https://ctaohe.github.io/tags/passport-local/"/>
    
      <category term="express-session" scheme="https://ctaohe.github.io/tags/express-session/"/>
    
  </entry>
  
  <entry>
    <title>建立使用者功能與資料關聯</title>
    <link href="https://ctaohe.github.io/2019/06/27/2019-6-27_%E7%99%BB%E5%87%BA%E7%99%BB%E5%85%A5%E5%BB%BA%E7%AB%8B%E9%97%9C%E8%81%AF/"/>
    <id>https://ctaohe.github.io/2019/06/27/2019-6-27_登出登入建立關聯/</id>
    <published>2019-06-26T16:00:00.000Z</published>
    <updated>2019-06-27T15:13:55.776Z</updated>
    
    <content type="html"><![CDATA[<p>AC教材 todo list 練習。</p><p>當完成專案與認證功能後，會發現登入後大家看到的都是一樣的資訊，而沒有專屬自己的頁面。</p><ul><li>這時候就必須要將 model 中的 user 與資料建立起關聯。</li><li>修改路由與 controller，讓 model 在查詢更新資料庫，只會取得/修改已經登入者的資料。</li></ul><p>database 中的 user collection(有 User document) 和 data collention(有 data document)都是分開的我們要將它建立起關聯。</p><p>使用 User 的 _id 在 data 資料上做上記號，</p><h2 id="關聯實作步驟"><a href="#關聯實作步驟" class="headerlink" title="關聯實作步驟"></a>關聯實作步驟</h2><ol><li>修改 data model 的 Schema</li><li>修改與 datas 有關的路由</li></ol><p>將在 data model 中加入一個 userId的 key 用來儲存 user _id 以建立關聯。使用到 Mongoose 的 Populate 功能。</p><h3 id="修改-model"><a href="#修改-model" class="headerlink" title="修改 model"></a>修改 model</h3><p>data model<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todoSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  name: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    required: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  done: &#123;</span><br><span class="line">    type: <span class="built_in">Boolean</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  userId: &#123; <span class="comment">// 加入 userId，建立跟 User 的關聯</span></span><br><span class="line">    type: Schema.Types.ObjectId, <span class="comment">// 定義為 Moongoose 的 ObjectId</span></span><br><span class="line">    ref: <span class="string">'User'</span>, <span class="comment">// 定義屬性從 user model 來</span></span><br><span class="line">    index: <span class="literal">true</span>, <span class="comment">// 把 userId 設定成索引，使用 mongoDB支援 index 功能，增加讀取效能</span></span><br><span class="line">    required: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="修改路由"><a href="#修改路由" class="headerlink" title="修改路由"></a>修改路由</h3><p>建立起關聯後，將路由在 Todo.find({}) 中，加入條件 <code>Todo.find({ userId: req.user._id })</code>，去讀取關聯資料。</p><ol><li>修改 home.js 路由</li><li>修改 detail, edit, delete 路由</li></ol><p>routers/home.js<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">'/'</span>, authenticated, (req, res) =&gt; &#123;</span><br><span class="line">  Todo.find(&#123; <span class="attr">userId</span>: req.user._id &#125;) <span class="comment">// Todo.find(&#123; 只找 userId 等於 req.user._id的文件 &#125;)</span></span><br><span class="line">    .sort(&#123; <span class="attr">name</span>: <span class="string">'asc'</span> &#125;)</span><br><span class="line">    .exec(<span class="function">(<span class="params">err, todos</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err)</span><br><span class="line">      <span class="keyword">return</span> res.render(<span class="string">'index'</span>, &#123; <span class="attr">todos</span>: todos &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure></p><p>將 todo.js 路由的 action 從 Todo.findById 修改為 Todo.findOne({ _id: req.params.id, userId: req.user._id })，尋找在 data collection 中同時符合 data ID 以及 user ID 的資料。</p><p>routes/todo.js<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"><span class="keyword">const</span> Todo = <span class="built_in">require</span>(<span class="string">'../models/todo'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; authenticated &#125; = <span class="built_in">require</span>(<span class="string">'../config/auth'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 總頁面</span></span><br><span class="line"><span class="comment">// 新增一筆頁面</span></span><br><span class="line"><span class="comment">// 詳細資料頁面 加入解構式</span></span><br><span class="line">router.get(<span class="string">'/:id'</span>, authenticated, (req, res) =&gt; &#123;</span><br><span class="line">  Todo.findOne(&#123; <span class="attr">_id</span>: req.params.id, <span class="attr">userId</span>: req.user._id&#125;, (err, todo) =&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err)</span><br><span class="line">    <span class="keyword">return</span> res.render(<span class="string">'detail'</span>, &#123; <span class="attr">todo</span>: todo &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 新增一筆(行為)</span></span><br><span class="line">router.post(<span class="string">'/'</span>, authenticated, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> todo = Todo(&#123;</span><br><span class="line">    name: req.body.name,</span><br><span class="line">    userId: req.user._id <span class="comment">// 儲存userId</span></span><br><span class="line">  &#125;)</span><br><span class="line">  todo.save(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err)</span><br><span class="line">    <span class="keyword">return</span> res.redirect(<span class="string">'/'</span>) <span class="comment">//正確存到資料庫並回到'/'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 修改的資料頁面與 詳細資料頁面 相似差在 路徑</span></span><br><span class="line">router.get(<span class="string">'/:id/edit'</span>, authenticated, (req, res) =&gt; &#123;</span><br><span class="line">  Todo.findOne(&#123; <span class="attr">_id</span>: req.params.id, <span class="attr">userId</span>: req.user._id&#125;, (err, todo) =&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err)</span><br><span class="line">    <span class="keyword">return</span> res.render(<span class="string">'edit'</span>, &#123; <span class="attr">todo</span>: todo &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 修改資料</span></span><br><span class="line">router.post(<span class="string">'/:id'</span>, authenticated, (req, res) =&gt; &#123; <span class="comment">//路徑用到/:id 主要是聯繫到資料庫這樣寫比較好</span></span><br><span class="line">  Todo.findOne(&#123; <span class="attr">_id</span>: req.params.id, <span class="attr">userId</span>: req.user._id&#125;, (err, todo) =&gt;&#123; <span class="comment">//先找出符合登入的使用者</span></span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err)</span><br><span class="line">    todo.name == req.body.name <span class="comment">//因為資料已經存在所以直接取出放入變數</span></span><br><span class="line">    <span class="keyword">if</span> (req.body.done === <span class="string">'on'</span>) &#123;</span><br><span class="line">      todo.done = <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      todo.done = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    todo.save(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err)</span><br><span class="line">      <span class="keyword">return</span> res.redirect(<span class="string">'/'</span>) <span class="comment">//正確存到資料庫並回到'/'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 刪除資料</span></span><br><span class="line">router.delete(<span class="string">'/:id/delete'</span>, authenticated, (req, res) =&gt; &#123;</span><br><span class="line">  Todo.findOne(&#123; <span class="attr">_id</span>: req.params.id, <span class="attr">userId</span>: req.user._id&#125;, (err, todo) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err)</span><br><span class="line">    todo.remove(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err)</span><br><span class="line">      <span class="keyword">return</span> res.redirect(<span class="string">'/'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;AC教材 todo list 練習。&lt;/p&gt;
&lt;p&gt;當完成專案與認證功能後，會發現登入後大家看到的都是一樣的資訊，而沒有專屬自己的頁面。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;這時候就必須要將 model 中的 user 與資料建立起關聯。&lt;/li&gt;
&lt;li&gt;修改路由與 control
      
    
    </summary>
    
      <category term="實作" scheme="https://ctaohe.github.io/categories/%E5%AF%A6%E4%BD%9C/"/>
    
    
      <category term="auth.js" scheme="https://ctaohe.github.io/tags/auth-js/"/>
    
      <category term="user.js" scheme="https://ctaohe.github.io/tags/user-js/"/>
    
      <category term="mongoose" scheme="https://ctaohe.github.io/tags/mongoose/"/>
    
  </entry>
  
  <entry>
    <title>bcrypt 處理密碼及處理警告訊息</title>
    <link href="https://ctaohe.github.io/2019/06/27/2019-6-27-bcrypt%E8%99%95%E7%90%86%E5%AF%86%E7%A2%BC/"/>
    <id>https://ctaohe.github.io/2019/06/27/2019-6-27-bcrypt處理密碼/</id>
    <published>2019-06-26T16:00:00.000Z</published>
    <updated>2019-06-27T07:17:11.815Z</updated>
    
    <content type="html"><![CDATA[<p>為資料庫的使用者密碼<code>加鹽</code>，將在資料庫的密碼 <code>明碼(plain text)</code>做雜湊處理。</p><h2 id="bcrypt"><a href="#bcrypt" class="headerlink" title="bcrypt"></a>bcrypt</h2><p>是為 <code>密碼雜湊函式(password hashing)</code>，根據 <code>Blowfish 加密演算</code>設計。</p><p>詳細看　<a href="https://en.wikipedia.org/wiki/Bcrypt" target="_blank" rel="noopener">wikipedia</a></p><ol><li>在使用者設定的密碼上，加上一段隨機字串(稱為salt)，將它組合起來。</li><li>使用的是<code>雜湊演算(hashing algorithm)</code>，產生 <code>hashed password</code>。</li><li>將 hashed password 跟中途加入的 salt 分開儲存。</li><li>使用者嘗試登入處理後，如果字串與資料庫 hashed password 相同，即為成功，不一致失敗。</li><li>雜湊處理過後的字串無法還原。表示沒法解出原貌。</li></ol><h3 id="加密-encryption-與密碼雜湊-password-hashing-不同"><a href="#加密-encryption-與密碼雜湊-password-hashing-不同" class="headerlink" title="加密(encryption)與密碼雜湊(password hashing)不同"></a>加密(encryption)與密碼雜湊(password hashing)不同</h3><h2 id="bcrypt-實作"><a href="#bcrypt-實作" class="headerlink" title="bcrypt 實作"></a>bcrypt 實作</h2><ol><li>安裝 <a href="https://www.npmjs.com/package/bcryptjs" target="_blank" rel="noopener">bcryptjs</a> = bcrypt.js</li><li>修改路由，使用 bcrypt 處理註冊密碼</li><li>修改 passport middleware，處理登入密碼與資料庫比對。</li></ol><h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install bcryptjs</span><br></pre></td></tr></table></figure><h3 id="修改路由"><a href="#修改路由" class="headerlink" title="修改路由"></a>修改路由</h3><p>在註冊中判斷是否為新使用者後，使用 <code>加鹽</code> 的方式，將新使用者資料做雜湊處理。</p><p>注意使用到 JS 中的 throw 用法， throw 拋出後給 .catch 處理。</p><p>user.js<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> passport = <span class="built_in">require</span>(<span class="string">'passport'</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"><span class="keyword">const</span> bcrypt = <span class="built_in">require</span>(<span class="string">'bcryptjs'</span>) <span class="comment">//載入 bcryptjs</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 送出註冊時檢查</span></span><br><span class="line">router.post(<span class="string">'/register'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, email, password, password2 &#125; = req.body</span><br><span class="line">  User.findOne(&#123; <span class="attr">email</span>: email&#125;).then(<span class="function"><span class="params">user</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (user) &#123;</span><br><span class="line">      <span class="comment">//略</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> newUser = <span class="keyword">new</span> User(&#123;</span><br><span class="line">        name,</span><br><span class="line">        email,</span><br><span class="line">        password</span><br><span class="line">      &#125;)</span><br><span class="line">      bcrypt.genSalt(<span class="number">10</span>, (err, salt) =&gt;</span><br><span class="line">        bcrypt.hash(newUser.password, salt, (err, hash) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">          newUser.password = hash</span><br><span class="line">          </span><br><span class="line">          newUser</span><br><span class="line">            .save()</span><br><span class="line">            .then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">              res.redirect(<span class="string">'/'</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</span><br><span class="line">        &#125;)</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>由於我們做了密碼的雜湊處理，所以在登入部分也需要修改 passport 檢查使用者密碼的部分，使用 <code>bcrypt.compare</code> 函式比對輸入的密碼是否與資料庫內容一致。</p><p>config/passport.js<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> LocalStrategy = <span class="built_in">require</span>(<span class="string">'passport-local'</span>).Strategy</span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line"><span class="keyword">const</span> bcrypy = <span class="built_in">require</span>(<span class="string">'bcryptjs'</span>)</span><br><span class="line"><span class="keyword">const</span> User = <span class="built_in">require</span>(<span class="string">'../models/user.js'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">passport</span> =&gt;</span> &#123;</span><br><span class="line">  passport.use(</span><br><span class="line">    <span class="keyword">new</span> LocalStrategy(&#123; <span class="attr">usernameField</span>: <span class="string">'email'</span>&#125;, (email, password, done) =&gt; &#123;</span><br><span class="line">      User.findOne(&#123; <span class="attr">email</span>: email &#125;).then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">          <span class="keyword">return</span> done(<span class="literal">null</span>, <span class="literal">false</span>, &#123;<span class="attr">message</span>: <span class="string">'That email is not registered'</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        bcrypt.compare(password, user.password, (err, isMatch) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (isMatch) &#123;</span><br><span class="line">            <span class="keyword">return</span> done(<span class="literal">null</span>, user)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> done(<span class="literal">null</span>, <span class="literal">false</span>, &#123;<span class="attr">message</span>: <span class="string">'Email and password incorrect'</span>&#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>原本為<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (user.password != password) &#123;</span><br><span class="line">  <span class="keyword">return</span> done(<span class="literal">null</span>, <span class="literal">false</span>, &#123;<span class="attr">message</span>: <span class="string">'Email or Password incorrect'</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> done(<span class="literal">null</span>, user)</span><br></pre></td></tr></table></figure></p><p>改成<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">bcrypt.compare(password, user.password, (err, isMatch) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (isMatch) &#123;</span><br><span class="line">    <span class="keyword">return</span> done(<span class="literal">null</span>, user)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> done(<span class="literal">null</span>, <span class="literal">false</span>, &#123;<span class="attr">message</span>: <span class="string">'Email and password incorrect'</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="在-commend-line-的警告訊息"><a href="#在-commend-line-的警告訊息" class="headerlink" title="在 commend line 的警告訊息"></a>在 commend line 的警告訊息</h2><p>在設定完前面實作後，可以發現 command line 出現了<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">express-session deprecated undefined resave option; provide resave option</span><br><span class="line">express-session deprecated undefined savaUninitialized option; provide saveUninitialized option</span><br><span class="line">(node:xxxxx) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndex instead.</span><br></pre></td></tr></table></figure></p><p>前兩項為 Express-session warnings : 關於 resave 和 saveUninitialized。</p><ul><li>resave: <code>ture</code> 與使用者互動後，強制將 session 更新到 session store。</li><li>saveUninitialized: 強制將為初始化的 session 存回 session store。為初始表示是新的，例如為登入的使用者 session。</li></ul><p>第三項為 mongoose warning，問題發生源在認證登入，建立關聯時，增加 userId 屬性，並設為 index。</p><p>express session warning in app.js<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(session(&#123;</span><br><span class="line">  secret: <span class="string">'secret key'</span> <span class="comment">// 自定義的字串用來處理雜湊</span></span><br><span class="line">  resave: <span class="string">'false'</span>,</span><br><span class="line">  saveUninitialized: <span class="string">'false'</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></p><p>mongoose warning in app.js<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mongoose.connect(<span class="string">'mongodb://localhost/todo'</span>, &#123; <span class="attr">userNewUrlParser</span>: ture, <span class="attr">useCreateIndex</span>: <span class="literal">true</span> &#125;) <span class="comment">// 新增 useCreateIndex: true</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;為資料庫的使用者密碼&lt;code&gt;加鹽&lt;/code&gt;，將在資料庫的密碼 &lt;code&gt;明碼(plain text)&lt;/code&gt;做雜湊處理。&lt;/p&gt;
&lt;h2 id=&quot;bcrypt&quot;&gt;&lt;a href=&quot;#bcrypt&quot; class=&quot;headerlink&quot; title=&quot;bcry
      
    
    </summary>
    
      <category term="實作" scheme="https://ctaohe.github.io/categories/%E5%AF%A6%E4%BD%9C/"/>
    
    
      <category term="bcrypt" scheme="https://ctaohe.github.io/tags/bcrypt/"/>
    
  </entry>
  
</feed>
